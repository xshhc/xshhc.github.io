{
    "version": "https://jsonfeed.org/version/1",
    "title": "xsh 的世界 • All posts by \"real_world\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/08/14/tinyproxy-CVE-2023-49606/",
            "url": "http://example.com/2024/08/14/tinyproxy-CVE-2023-49606/",
            "title": "tinyproxy-CVE-2023-49606",
            "date_published": "2024-08-13T16:43:13.000Z",
            "content_html": "<p>[TOC]</p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Tinyproxy 是一个轻量级的 HTTP&#x2F;HTTPS 代理服务器，主要用于提供基本的代理功能，同时占用较少的系统资源。</p>\n<p>CVE-2023-49606 是 http 标头导致的 UAF，比较新鲜，所以分析下</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>先在 <a href=\"https://github.com/tinyproxy/tinyproxy\">https://github.com/tinyproxy/tinyproxy</a> 拉取 1.11.1 版本的 tinyproxy。</p>\n<p>执行以下命令进行编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./autogen.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --enable-debug</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>利用以下命令启动 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/tinyproxy</span><br></pre></td></tr></table></figure>\n\n<p>然后访问 8888 端口即可</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/b10f6a7df8f535dec8c648fd7d54c9aa.png\" alt=\"b10f6a7df8f535dec8c648fd7d54c9aa\"></p>\n<p>调试方面我选择直接利用 gdb attach 上去</p>\n<p>先将对应程序拉取出来 IDA 进行反汇编</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/a6888624a1ad5c1147e21f6c1792e5a6.png\" alt=\"a6888624a1ad5c1147e21f6c1792e5a6\"></p>\n<p>接着查看进程号</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/98a85ec7396ff8b540f7050858e510f5.png\" alt=\"98a85ec7396ff8b540f7050858e510f5\"></p>\n<p>调试之前需要将机器的 ptrace_scope 设置为 0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c &#x27;echo &quot;0&quot; &gt; /proc/sys/kernel/yama/ptrace_scope&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>就可以愉快调试</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/a2c330dcc0f2b571bb2e38b41393028c.png\"></p>\n<h2 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h2><p>通过 git 提交记录 <a href=\"https://github.com/tinyproxy/tinyproxy/commit/12a8484265f7b00591293da492bb3c9987001956\">https://github.com/tinyproxy/tinyproxy/commit/12a8484265f7b00591293da492bb3c9987001956</a> ，可以看到 diff 结果</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/860932f95a1f9a32dd9fb3470f2ee989.png\" alt=\"860932f95a1f9a32dd9fb3470f2ee989\">、</p>\n<p>为了方便，把两个版本的源码下载通过 vscode diff</p>\n<p>可以看到 diff 结果有好几处不同<img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/5828637ade512f753b9cae32da5a5ef9.png\"></p>\n<p>修复的地方也被作者写注释了</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/765ca0de167930370245415fafa6f294.png\"></p>\n<p>接着通过网上搜集信息，在 <a href=\"https://talosintelligence.com/vulnerability_reports/TALOS-2023-1889\">https://talosintelligence.com/vulnerability_reports/TALOS-2023-1889</a> 该文章披露了漏洞细节，所以跟着再走下流程，把 poc 写出来</p>\n<p>首先是正常的交互，tinyproxy 是一个代理程序，所以，host 是代理去往目标地址，正常的交互最简单的请求包如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://127.0.0.1:8888&#x27;</span></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&#x27;Connection&#x27;</span>: <span class=\"string\">&#x27;close&#x27;</span>, <span class=\"string\">&#x27;Host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1:8000&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.text)</span><br></pre></td></tr></table></figure>\n\n<p>比如我在 Desktop 下利用 python 开启了一个 http 服务器</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/bb6eb248e924da12c21d02efc037b63c.png\" alt=\"bb6eb248e924da12c21d02efc037b63c\"></p>\n<p>那么上面请求包的返回结果就是 python http 服务器的内容</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/240d475d10cffe4c5000657e0e8ab4d0.png\" alt=\"240d475d10cffe4c5000657e0e8ab4d0\"></p>\n<p>host 乱填时候，一直报 500，以为是软件问题，又通过 apt 安装了一个，还是一样的问题，后面我也是看日志才知道 host 是目标服务器地址，host 乱填时候，日志一直报 connect fail，所以就给他填了个能正常访问的地址</p>\n<p>其漏洞点在于 connection 关键词的处理，从下面的 diff 中可以看到，函数名为 remove_connection_headers ，是用来处理释放 connection 操作的</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/8a469b67ece47ff2518e9412480e1e79.png\" alt=\"8a469b67ece47ff2518e9412480e1e79\"></p>\n<p>结合调试中，可以确定 data 和 ptr 是 connection 关键词的值</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/2239e18e398f2322e8e5cff9ba91a6ac.png\" alt=\"2239e18e398f2322e8e5cff9ba91a6ac\"></p>\n<p>然后会利用 orderedmap_remove 函数从 head 的哈希结果表中去除 connetction:close</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/48a24d4fce36254f554207178a57081a.png\"></p>\n<p>orderedmap_remove  是一个先计算哈希，再根据哈希结果从哈希表删除哈希结果的函数</p>\n<ol>\n<li>会利用 htab_find2 函数取计算 key 的哈希，并且判断结果是否在哈希表中</li>\n<li>如果在，那么利用 sblist_get 函数获取哈希表中键对应的键值的堆指针</li>\n<li>利用 free 释放值的堆指针</li>\n<li>利用 while 处理哈希链表</li>\n<li>将键也从哈希表中删除</li>\n<li>利用 free 释放键的堆指针</li>\n</ol>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/19c1552b25cf6eabc6cb2e22b84adff9.png\" alt=\"19c1552b25cf6eabc6cb2e22b84adff9\"></p>\n<p>当请求包包含 connection:close 时候，上面一张 gdb 调试截图中因为哈希表中没有 close 关键词，会在  if(!v) return 0 直接退出，进入下面的 orderdmap_remove 函数</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/d7009aa2ff90fd05932a9c64ceb32fbf.png\" alt=\"d7009aa2ff90fd05932a9c64ceb32fbf\"></p>\n<p>如在 gdb 中</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/7a739d522ef8fa7d023cc48a59257f7c.png\"></p>\n<p>poc 如下，如果我们修改请求包中的 connection:close 为 connection:connection 时候</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://127.0.0.1:8888&#x27;</span></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&#x27;Connection&#x27;</span>: <span class=\"string\">&#x27;Connection&#x27;</span>, <span class=\"string\">&#x27;Host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1:8000&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.text)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在删除键的时候，先对 Connection 释放一次，这个 Connection  是 Connection 键的值</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/5d719467f6757158071b917226974054.png\"></p>\n<p>接下来继续重点看该函数</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/image-20240513230540527.png\" alt=\"image-20240513230540527\"></p>\n<p>在这个函数中是不强制区分键和值的，因此 Connect 可以作为键使用的，所以，在 orderedmap_remove 函数处理时候，sblist_get 函数获取键对应的值指针时候，拿到是 Connection 作为键时候的堆指针。</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/5fe2547e500dbeba7d62ff6ebdb76266.png\" alt=\"5fe2547e500dbeba7d62ff6ebdb76266\"></p>\n<p>本来上面那一步应该要释放 Connection  作为值的堆指针，但是却因为哈希原因错乱了，这就导致在后面利用 htab_delete 去删除键的哈希时候，会把已经 free 的 Connection  作为键的堆指针给删去。</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/6e145c9a101937a2fb772b404ec3ae2d.png\" alt=\"6e145c9a101937a2fb772b404ec3ae2d\"></p>\n<p>可以看到已经被放入 bin 了</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/4782e3ae8ab89e74f7d90c310a6084b9.png\" alt=\"4782e3ae8ab89e74f7d90c310a6084b9\"></p>\n<p>在这里时候，还不会发生 crash，到了程序末尾，利用 orderedmap_destroy 函数去 free 删去的键堆指针时候，就会发生 double free 导致 crash</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/06d28d5c06d7dc6085f8bdf0b67b1ecc.png\" alt=\"06d28d5c06d7dc6085f8bdf0b67b1ecc\"></p>\n<p>实质上是调用 orderedmap_destroy_contents 循环 free 指针，而后 free 哈希表</p>\n<p><img src=\"/2024/08/14/tinyproxy-CVE-2023-49606/36e40ac987f03c09a1387b7eb0e2f21c.png\" alt=\"36e40ac987f03c09a1387b7eb0e2f21c\"></p>\n<p>就在这里导致了 crash</p>\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><p>因为该程序是动态编译，其链接的是本地的 libc.so ，因此堆管理方式取决于 libc 中堆的实现，考虑到该程序一般是运行在 linux 服务器，因此尝试在 ptmalloc glibc_2.27 以上环境进行利用，没有 tcache bin 机制的 ubuntu16 就太老了。</p>\n<p>由于是 double free 漏洞，如果要完成利用，那么需要</p>\n<p>1.控制堆，比如令其在 fastbin 上进行 double free，并且需要能操控 double free 后的堆块</p>\n<p>2.可能泄露内存信息 </p>\n<p>由于是一个堆漏洞，为了写利用，需要把整个程序的大概实现都看一下。</p>\n<p>child.c 中的 child_main_loop 函数是起始函数，在这个函数中，实现了对child 结构体（单线程中存放信息的结构体）和  childs 结构体（存放所有 chlid）的初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">child_main_loop</span> <span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        childs = sblist_new(<span class=\"keyword\">sizeof</span> (<span class=\"keyword\">struct</span> child*), config-&gt;maxclients);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * We have to wait for connections on multiple fds,</span></span><br><span class=\"line\"><span class=\"comment\">         * so use select/poll/whatever.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!config-&gt;quit) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                collect_threads();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * We have a socket that is readable.</span></span><br><span class=\"line\"><span class=\"comment\">                 * Continue handling this connection.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">                clilen = <span class=\"keyword\">sizeof</span>(cliaddr_storage);</span><br><span class=\"line\">                connfd = accept (listenfd, cliaddr, &amp;clilen);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * Make sure no error occurred...</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connfd &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        log_message (LOG_ERR,</span><br><span class=\"line\">                                     <span class=\"string\">&quot;Accept returned an error (%s) ... retrying.&quot;</span>,</span><br><span class=\"line\">                                     strerror (errno));</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                child = safecalloc(<span class=\"number\">1</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> child));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!child) &#123;</span><br><span class=\"line\">oom:</span><br><span class=\"line\">                        close(connfd);</span><br><span class=\"line\">                        log_message (LOG_CRIT,</span><br><span class=\"line\">                                     <span class=\"string\">&quot;Could not allocate memory for child.&quot;</span>);</span><br><span class=\"line\">                        usleep(<span class=\"number\">16</span>); <span class=\"comment\">/* prevent 100% CPU usage in OOM situation */</span></span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                child-&gt;done = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!sblist_add(childs, &amp;child)) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">free</span>(child);</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> oom;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                conn_struct_init(&amp;child-&gt;conn);</span><br><span class=\"line\">                child-&gt;conn.client_fd = connfd;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(&amp;child-&gt;client.addr, &amp;cliaddr_storage, <span class=\"keyword\">sizeof</span>(cliaddr_storage));</span><br><span class=\"line\"></span><br><span class=\"line\">                attrp = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pthread_attr_init(&amp;attr) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        attrp = &amp;attr;</span><br><span class=\"line\">                        pthread_attr_setstacksize(attrp, <span class=\"number\">256</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pthread_create(&amp;child-&gt;thread, attrp, child_thread, child) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        sblist_delete(childs, sblist_getsize(childs) <span class=\"number\">-1</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">free</span>(child);</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> oom;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\tsafefree(fds);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上，主要是申请了 child 结构体，将 done 置 0，表示未被启动，并且利用 conn_struct_init 函数初始化，同时赋予 child-&gt;conn.client_fd  为被代理机器  socket 接受到的 connfd。后面就是开始线程启动 child_thread，同时将线程标志放入 child 结构体中的 thread</p>\n<p>child 结构体如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">child</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">pthread_t</span> thread;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">client</span> <span class=\"title\">client</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">conn_s</span> <span class=\"title\">conn</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"type\">int</span> done;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>重点关注是存放 http 信息的 conn 结构体，定义如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">conn_s</span> &#123;</span></span><br><span class=\"line\">        <span class=\"type\">int</span> client_fd;</span><br><span class=\"line\">        <span class=\"type\">int</span> server_fd;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">buffer_s</span> *<span class=\"title\">cbuffer</span>;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">buffer_s</span> *<span class=\"title\">sbuffer</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* The request line (first line) from the client */</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *request_line;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Booleans */</span></span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">int</span> connect_method;</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">int</span> show_stats;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * This structure stores key -&gt; value mappings for substitution</span></span><br><span class=\"line\"><span class=\"comment\">         * in the error HTML files.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">htab</span> *<span class=\"title\">error_variables</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> error_number;</span><br><span class=\"line\">        <span class=\"type\">char</span> *error_string;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* A Content-Length value from the remote server */</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"type\">int</span> server;</span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"type\">int</span> client;</span><br><span class=\"line\">        &#125; content_length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Store the server&#x27;s IP (for BindSame)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *server_ip_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Store the client&#x27;s IP information</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *client_ip_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Store the incoming request&#x27;s HTTP protocol.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">                <span class=\"type\">unsigned</span> <span class=\"type\">int</span> major;</span><br><span class=\"line\">                <span class=\"type\">unsigned</span> <span class=\"type\">int</span> minor;</span><br><span class=\"line\">        &#125; protocol;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> REVERSE_SUPPORT</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Place to store the current per-connection reverse proxy path</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *reversepath;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Pointer to upstream proxy.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">upstream</span> *<span class=\"title\">upstream_proxy</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>有注释就不解释了</p>\n<p>child_thread 函数是执行 handle_connection 函数，同时闯入 conn 和 客户端地址，置 done 为 1</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span>* <span class=\"title function_\">child_thread</span><span class=\"params\">(<span class=\"type\">void</span>* data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">child</span> *<span class=\"title\">c</span> =</span> data;</span><br><span class=\"line\">\thandle_connection (&amp;c-&gt;conn, &amp;c-&gt;client.addr);</span><br><span class=\"line\">\tc-&gt;done = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>handle_connection 函数则执行主要功能</p>\n<p>先是接受客户端发送的 http 请求，同时处理 http 标头</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (read_request_line (connptr) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               update_stats (STAT_BADCONN);</span><br><span class=\"line\">               <span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * The &quot;hashofheaders&quot; store the client&#x27;s headers.</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       hashofheaders = orderedmap_create (HEADER_BUCKETS);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (hashofheaders == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">               update_stats (STAT_BADCONN);</span><br><span class=\"line\">               indicate_http_error (connptr, <span class=\"number\">503</span>, <span class=\"string\">&quot;Internal error&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"string\">&quot;detail&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"string\">&quot;An internal server error occurred while processing &quot;</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;your request. Please contact the administrator.&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">               HC_FAIL();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Get all the headers from the client in a big hash.</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (get_all_headers (connptr-&gt;client_fd, hashofheaders) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               log_message (LOG_WARNING,</span><br><span class=\"line\">                            <span class=\"string\">&quot;Could not retrieve all the headers from the client&quot;</span>);</span><br><span class=\"line\">               indicate_http_error (connptr, <span class=\"number\">400</span>, <span class=\"string\">&quot;Bad Request&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"string\">&quot;detail&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"string\">&quot;Could not retrieve all the headers from &quot;</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;the client.&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">               update_stats (STAT_BADCONN);</span><br><span class=\"line\">               HC_FAIL();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       got_headers = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，显示利用 orderedmap_create 函数创建了一个哈希链表头，接着利用 get_all_headers 函数去把标头插入哈希链表中</p>\n<p>接着再检测是否存在上游代理，如果存在则是通过 connect_to_upstream 去通过上游代理连接目标服务器，否则是直接通过 tinyproxy 运行服务器去连接目标服务器</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connptr-&gt;upstream_proxy = UPSTREAM_HOST (request-&gt;host);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connptr-&gt;upstream_proxy != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connect_to_upstream (connptr, request) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        HC_FAIL();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                connptr-&gt;server_fd = opensock (request-&gt;host, request-&gt;port,</span><br><span class=\"line\">                                               connptr-&gt;server_ip_addr);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connptr-&gt;server_fd &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        indicate_http_error (connptr, <span class=\"number\">500</span>, <span class=\"string\">&quot;Unable to connect&quot;</span>,</span><br><span class=\"line\">                                             <span class=\"string\">&quot;detail&quot;</span>,</span><br><span class=\"line\">                                             PACKAGE_NAME <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">                                             <span class=\"string\">&quot;was unable to connect to the remote web server.&quot;</span>,</span><br><span class=\"line\">                                             <span class=\"string\">&quot;error&quot;</span>, strerror (errno), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                        HC_FAIL();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                log_message (LOG_CONN,</span><br><span class=\"line\">                             <span class=\"string\">&quot;Established connection to host \\&quot;%s\\&quot; using &quot;</span></span><br><span class=\"line\">                             <span class=\"string\">&quot;file descriptor %d.&quot;</span>, request-&gt;host,</span><br><span class=\"line\">                             connptr-&gt;server_fd);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!connptr-&gt;connect_method)</span><br><span class=\"line\">                        establish_http_connection (connptr, request);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来则是执行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (process_client_headers (connptr, hashofheaders) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                update_stats (STAT_BADCONN);</span><br><span class=\"line\">                log_message (LOG_INFO,</span><br><span class=\"line\">                             <span class=\"string\">&quot;process_client_headers failed: %s. host \\&quot;%s\\&quot; using &quot;</span></span><br><span class=\"line\">                             <span class=\"string\">&quot;file descriptor %d.&quot;</span>, strerror(errno),</span><br><span class=\"line\">                             request-&gt;host,</span><br><span class=\"line\">                             connptr-&gt;server_fd);</span><br><span class=\"line\"></span><br><span class=\"line\">                HC_FAIL();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>process_client_headers 函数功能有两个，一个是处理特殊的标头信息，比如 Content-Length ，connection，proxy-connection，同时发送标头，二是当 Content-Length 大于 0 时候，读入 post 数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">process_client_headers</span> <span class=\"params\">(<span class=\"keyword\">struct</span> conn_s *connptr, orderedmap hashofheaders)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> *skipheaders[] = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;host&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;keep-alive&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;proxy-connection&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;te&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;trailers&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;upgrade&quot;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> iter;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">char</span> *data, *header;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * See if there is a &quot;Content-Length&quot; header.  If so, again we need</span></span><br><span class=\"line\"><span class=\"comment\">         * to do a bit of processing.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        connptr-&gt;content_length.client = get_content_length (hashofheaders);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * See if there is a &quot;Connection&quot; header.  If so, we need to do a bit</span></span><br><span class=\"line\"><span class=\"comment\">         * of processing. :)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        remove_connection_headers (hashofheaders);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Delete the headers listed in the skipheaders list</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i != (<span class=\"keyword\">sizeof</span> (skipheaders) / <span class=\"keyword\">sizeof</span> (<span class=\"type\">char</span> *)); i++) &#123;</span><br><span class=\"line\">                orderedmap_remove (hashofheaders, skipheaders[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Send, or add the Via header */</span></span><br><span class=\"line\">        ret = write_via_header (connptr-&gt;server_fd, hashofheaders,</span><br><span class=\"line\">                                connptr-&gt;protocol.major,</span><br><span class=\"line\">                                connptr-&gt;protocol.minor);</span><br><span class=\"line\">        <span class=\"comment\">// 其它省略代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Write the final &quot;blank&quot; line to signify the end of the headers */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (safe_write (connptr-&gt;server_fd, <span class=\"string\">&quot;\\r\\n&quot;</span>, <span class=\"number\">2</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Spin here pulling the data from the client.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">PULL_CLIENT_DATA:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connptr-&gt;content_length.client &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                ret = pull_client_data (connptr,</span><br><span class=\"line\">                                        connptr-&gt;content_length.client, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (connptr-&gt;content_length.client == <span class=\"number\">-2</span>)</span><br><span class=\"line\">                ret = pull_client_data_chunked (connptr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，先是获取了 content_length.client，然后是通过 remove_connection_headers 去释放 connection 和 proxy-connection 标头，这里也就是漏洞函数</p>\n<p>remove_connection_headers 函数实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">remove_connection_headers</span> <span class=\"params\">(orderedmap hashofheaders)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> *headers[] = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;connection&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;proxy-connection&quot;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">char</span> *data;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ptr;</span><br><span class=\"line\">        <span class=\"type\">ssize_t</span> len;</span><br><span class=\"line\">        <span class=\"type\">int</span> i,j,df;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i != (<span class=\"keyword\">sizeof</span> (headers) / <span class=\"keyword\">sizeof</span> (<span class=\"type\">char</span> *)); ++i) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* Look for the connection header.  If it&#x27;s not found, return. */</span></span><br><span class=\"line\">                data = orderedmap_find(hashofheaders, headers[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!data)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                len = <span class=\"built_in\">strlen</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * Go through the data line and replace any special characters</span></span><br><span class=\"line\"><span class=\"comment\">                 * with a NULL.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                ptr = data;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((ptr = <span class=\"built_in\">strpbrk</span> (ptr, <span class=\"string\">&quot;()&lt;&gt;@,;:\\\\\\&quot;/[]?=&#123;&#125; \\t&quot;</span>)))</span><br><span class=\"line\">                        *ptr++ = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * All the tokens are separated by NULLs.  Now go through the</span></span><br><span class=\"line\"><span class=\"comment\">                 * token and remove them from the hashofheaders.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                ptr = data;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (ptr &lt; data + len) &#123;</span><br><span class=\"line\">                        df = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"comment\">/* check that ptr isn&#x27;t one of headers to prevent</span></span><br><span class=\"line\"><span class=\"comment\">                           double-free (CVE-2023-49606) */</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j != (<span class=\"keyword\">sizeof</span> (headers) / <span class=\"keyword\">sizeof</span> (<span class=\"type\">char</span> *)); ++j)</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(!strcasecmp(ptr, headers[j])) df = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!df) orderedmap_remove (hashofheaders, ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/* Advance ptr to the next token */</span></span><br><span class=\"line\">                        ptr += <span class=\"built_in\">strlen</span> (ptr) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">while</span> (ptr &lt; data + len &amp;&amp; *ptr == <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">                                ptr++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/* Now remove the connection header it self. */</span></span><br><span class=\"line\">                orderedmap_remove (hashofheaders, headers[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>remove_connection_headers 只会去释放 connection 和 proxy-connection 标头，看到这里其实就差不多看完了，明显 gg 了。</p>\n<p>后面就是通过 write_via_header 发送标头到目标服务器，释放非 connection  标头</p>\n<p>接着说通过 pull_client_data 读 post 数据，一边读，一边往服务端发送</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">pull_client_data</span> <span class=\"params\">(<span class=\"keyword\">struct</span> conn_s *connptr, <span class=\"type\">long</span> <span class=\"type\">int</span> length, <span class=\"type\">int</span> iehack)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> *buffer;</span><br><span class=\"line\">        <span class=\"type\">ssize_t</span> len;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">        buffer =</span><br><span class=\"line\">            (<span class=\"type\">char</span> *) safemalloc (min (MAXBUFFSIZE, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span>) length));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!buffer)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                len = safe_read (connptr-&gt;client_fd, buffer,</span><br><span class=\"line\">                                 max (MAXBUFFSIZE, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span>) length));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> ERROR_EXIT;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!connptr-&gt;error_variables) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (safe_write (connptr-&gt;server_fd, buffer, len) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                                <span class=\"keyword\">goto</span> ERROR_EXIT;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                length -= len;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (length &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iehack) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * BUG FIX: Internet Explorer will leave two bytes (carriage</span></span><br><span class=\"line\"><span class=\"comment\">                 * return and line feed) at the end of a POST message.  These</span></span><br><span class=\"line\"><span class=\"comment\">                 * need to be eaten for tinyproxy to work correctly.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                ret = socket_nonblocking (connptr-&gt;client_fd);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        log_message(LOG_ERR, <span class=\"string\">&quot;Failed to set the client socket &quot;</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;to non-blocking: %s&quot;</span>, strerror(errno));</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> ERROR_EXIT;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">                len = recv (connptr-&gt;client_fd, buffer, <span class=\"number\">2</span>, MSG_PEEK);</span><br><span class=\"line\">        </span><br><span class=\"line\">                ret = socket_blocking (connptr-&gt;client_fd);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        log_message(LOG_ERR, <span class=\"string\">&quot;Failed to set the client socket &quot;</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;to blocking: %s&quot;</span>, strerror(errno));</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> ERROR_EXIT;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">0</span> &amp;&amp; errno != EAGAIN)</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> ERROR_EXIT;</span><br><span class=\"line\">        </span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((len == <span class=\"number\">2</span>) &amp;&amp; CHECK_CRLF (buffer, len)) &#123;</span><br><span class=\"line\">                        <span class=\"type\">ssize_t</span> bytes_read;</span><br><span class=\"line\">        </span><br><span class=\"line\">                        bytes_read = read (connptr-&gt;client_fd, buffer, <span class=\"number\">2</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (bytes_read == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                                log_message</span><br><span class=\"line\">                                        (LOG_WARNING,</span><br><span class=\"line\">                                         <span class=\"string\">&quot;Could not read two bytes from POST message&quot;</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        safefree (buffer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR_EXIT:</span><br><span class=\"line\">        safefree (buffer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>handle_connection 函数的后面部分，则是通过 process_server_headers 函数读目标服务器的响应包发送到客户端，和上面分析过 process_client_headers 的差不多，就不继续详细分析了。</p>\n<p>整个框架比较简单，通过审计代码可以知道。</p>\n<ol>\n<li><p>是线程执行，因此是使用的线程堆，而在这些代码中，明显没有往堆上申请存放什么结构体，堆上很干净，ptmalloc 下，要攻击只能通过寻常 CTF 中打 ptmalloc 堆的方式。同时是使用完就释放，很难构造堆风水。</p>\n</li>\n<li><p>由于 1 讲到的线程堆使用后就释放，所以线程开始执行时，不会残留什么堆块，申请和释放堆块的操作只有标头处理时候会涉及，而 connection 和 proxy-connection 标头一定会在其它标头前面释放，并且 connection 和 proxy-connection 标头只有两个，那么无论如何，double free 时候，第一次 free 的堆块总是在 tcahce bin，因为我们无法去释放其它标头来堆满 tcache bin，所以是无法控制的 crash。</p>\n</li>\n</ol>\n<p>后面我试着 patch 成 libc 2.27_1.0 ，即使不会触发 double free 的错误，那么也会在后面直接 crash</p>\n<p>这一个漏洞比较有趣的一个点是，如果目标服务器返回的响应包如果带有 poc，也是可以触发 crash 的，因为 process_server_headers 和 process_client_headers 差不多，但是同样的，process_client_headers 执行完之后，标头申请的堆块会被释放，process_server_headers  执行时，堆的初始环境和 process_client_headers  是一样的，同样无法完成利用。</p>\n<p>当然可能是我比较菜，在 ptmalloc 高版本下没看到利用的可能，如果有大佬有想法，可以指教下。</p>\n",
            "tags": [
                "tinyproxy"
            ]
        }
    ]
}